{"version":3,"file":"static/js/217.b4910d0b.chunk.js","mappings":"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","sources":["pages/AdminDashboardPage.tsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { PageTransition } from '../styles/Components';\nimport { \n  getRestaurantData, \n  getRestaurantOrders,\n  RestaurantAdminData,\n  AdminOrder,\n  getRestaurantMenu,\n  updateOrderStatus,\n  initializeAdminDatabase\n} from '../data/adminDatabase';\n\nconst Container = styled(PageTransition)`\n  min-height: 100vh;\n  background-color: var(--background-color);\n`;\n\nconst DashboardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: var(--spacing-lg);\n  background-color: var(--card-bg);\n  border-bottom: 1px solid var(--border-color);\n`;\n\nconst Title = styled.h1`\n  color: var(--text-color);\n  margin: 0;\n  font-size: 1.5rem;\n`;\n\nconst LogoutButton = styled.button`\n  padding: var(--spacing-sm) var(--spacing-md);\n  border: none;\n  border-radius: var(--border-radius-md);\n  background-color: var(--error-color);\n  color: white;\n  cursor: pointer;\n  font-size: 0.9rem;\n  transition: all 0.2s ease;\n\n  &:hover {\n    background-color: var(--error-dark);\n  }\n`;\n\nconst MainContent = styled.div`\n  padding: var(--spacing-lg);\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst StatsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));\n  gap: var(--spacing-md);\n  margin-bottom: var(--spacing-xl);\n`;\n\nconst StatCard = styled.div`\n  background-color: var(--card-bg);\n  padding: var(--spacing-lg);\n  border-radius: var(--border-radius-md);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n  text-align: center;\n  transition: all 0.3s ease;\n\n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  }\n`;\n\nconst StatValue = styled.div`\n  font-size: 2rem;\n  font-weight: 700;\n  margin: var(--spacing-md) 0;\n  color: var(--text-color);\n`;\n\nconst StatLabel = styled.div`\n  font-size: 0.9rem;\n  color: var(--text-muted);\n`;\n\nconst SectionTitle = styled.h2`\n  color: var(--text-color);\n  margin: var(--spacing-xl) 0 var(--spacing-md) 0;\n  font-size: 1.3rem;\n`;\n\nconst MenuGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: var(--spacing-md);\n`;\n\nconst MenuCard = styled.div`\n  display: flex;\n  align-items: center;\n  background-color: var(--card-bg);\n  padding: var(--spacing-md);\n  border-radius: var(--border-radius-md);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n`;\n\nconst MenuImage = styled.div`\n  width: 80px;\n  height: 80px;\n  border-radius: var(--border-radius-md);\n  background-color: var(--background-color);\n  background-size: cover;\n  background-position: center;\n  margin-right: var(--spacing-md);\n  flex-shrink: 0;\n`;\n\nconst MenuInfo = styled.div`\n  flex: 1;\n`;\n\nconst MenuName = styled.div`\n  font-weight: 600;\n  margin-bottom: var(--spacing-xs);\n  color: var(--text-color);\n`;\n\nconst MenuPrice = styled.div`\n  color: var(--primary-color);\n  font-weight: 700;\n`;\n\nconst Button = styled.button`\n  width: 100%;\n  padding: var(--spacing-md);\n  border: none;\n  border-radius: var(--border-radius-md);\n  background-color: var(--primary-color);\n  color: white;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  margin-top: var(--spacing-lg);\n\n  &:hover {\n    background-color: var(--primary-dark);\n  }\n`;\n\nconst OrdersTable = styled.div`\n  width: 100%;\n  border-radius: var(--border-radius-md);\n  overflow: hidden;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n  margin-top: var(--spacing-md);\n`;\n\nconst TableHead = styled.div`\n  display: grid;\n  grid-template-columns: 0.5fr 1fr 1fr 1fr 0.8fr;\n  background-color: var(--card-bg);\n  padding: var(--spacing-md);\n  font-weight: 600;\n  border-bottom: 1px solid var(--border-color);\n  color: var(--text-color);\n`;\n\nconst TableRow = styled.div`\n  display: grid;\n  grid-template-columns: 0.5fr 1fr 1fr 1fr 0.8fr;\n  padding: var(--spacing-md);\n  border-bottom: 1px solid var(--border-color);\n  background-color: var(--card-bg);\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: var(--card-hover);\n  }\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst TableCell = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst StatusBadge = styled.span<{ status: string }>`\n  padding: var(--spacing-xs) var(--spacing-sm);\n  border-radius: var(--border-radius-sm);\n  font-size: 0.8rem;\n  background-color: ${(props) => {\n    switch (props.status) {\n      case 'completed':\n        return 'var(--success-bg)';\n      case 'pending':\n        return 'var(--warning-bg)';\n      case 'cancelled':\n        return 'var(--error-bg)';\n      default:\n        return 'var(--card-hover)';\n    }\n  }};\n  color: ${(props) => {\n    switch (props.status) {\n      case 'completed':\n        return 'var(--success-color)';\n      case 'pending':\n        return 'var(--warning-color)';\n      case 'cancelled':\n        return 'var(--error-color)';\n      default:\n        return 'var(--text-color)';\n    }\n  }};\n`;\n\n// Добавим временный интерфейс для отображения элементов в заказе\ninterface OrderItem {\n  id: number;\n  name: string;\n  price: number;\n  quantity: number;\n  image?: string; // Добавляем необязательное свойство image\n}\n\nconst AdminDashboardPage: React.FC = () => {\n  const navigate = useNavigate();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [restaurantData, setRestaurantData] = useState<RestaurantAdminData | null>(null);\n  const [recentOrders, setRecentOrders] = useState<AdminOrder[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [userInfo, setUserInfo] = useState<{\n    id: number;\n    name: string;\n    email: string;\n    restaurantId: number;\n  } | null>(null);\n  const [popularItems, setPopularItems] = useState<OrderItem[]>([]);\n\n  // Перемещаем calculatePopularItems внутрь компонента и используем useCallback\n  const calculatePopularItems = useCallback(() => {\n    // Для подсчета популярных блюд используем объект\n    const itemCounter: Record<number, { count: number; name: string; price: number; id: number }> = {};\n    \n    // Имитируем содержимое заказов для статистики\n    const mockMenuItems = userInfo ? getRestaurantMenu(userInfo.restaurantId) : [];\n    \n    // Функция для генерации популярных товаров\n    const generateRandomItems = async () => {\n      // Подождем, пока menuItems получены\n      const menuItemsData = await mockMenuItems;\n      const randomItems: OrderItem[] = [];\n      \n      if (menuItemsData && menuItemsData.length > 0) {\n        // Выбираем от 1 до 3 случайных блюда из меню\n        const randomItemCount = Math.floor(Math.random() * 3) + 1;\n        \n        for (let i = 0; i < randomItemCount; i++) {\n          const randomIndex = Math.floor(Math.random() * menuItemsData.length);\n          const menuItem = menuItemsData[randomIndex];\n          const quantity = Math.floor(Math.random() * 3) + 1;\n          \n          randomItems.push({\n            id: menuItem.id,\n            name: menuItem.name,\n            price: menuItem.price,\n            quantity\n          });\n        }\n      }\n      \n      return randomItems;\n    };\n    \n    // Подсчитываем количество каждого блюда в заказах\n    recentOrders.forEach(order => {\n      // Обрабатываем сгенерированные элементы вместо order.items\n      generateRandomItems().then(items => {\n        items.forEach(item => {\n          if (!itemCounter[item.id]) {\n            itemCounter[item.id] = { count: 0, name: item.name, price: item.price, id: item.id };\n          }\n          itemCounter[item.id].count += item.quantity;\n        });\n      });\n    });\n    \n    // Конвертируем в массив и сортируем по популярности\n    const sortedItems = Object.values(itemCounter).sort((a, b) => b.count - a.count);\n    \n    // Если у нас нет заказов, попробуем получить некоторые блюда из меню\n    if (sortedItems.length === 0 && userInfo) {\n      // Вместо использования Promise напрямую, возвращаем дефолтные значения\n      return [\n        {\n          id: 1,\n          name: 'Популярное блюдо 1',\n          price: 350,\n          quantity: 1,\n          image: `/assets/images/paneer-tikka.jpg`\n        },\n        {\n          id: 2,\n          name: 'Популярное блюдо 2',\n          price: 450,\n          quantity: 1,\n          image: `/assets/images/paneer-tikka.jpg`\n        },\n        {\n          id: 3,\n          name: 'Популярное блюдо 3',\n          price: 550,\n          quantity: 1,\n          image: `/assets/images/paneer-tikka.jpg`\n        }\n      ];\n    }\n    \n    // Возвращаем топ-3 блюда\n    return sortedItems.slice(0, 3).map(item => ({\n      id: item.id,\n      name: item.name,\n      price: item.price,\n      quantity: 1,\n      image: `/assets/images/paneer-tikka.jpg` // используем заглушку для изображения\n    }));\n  }, [recentOrders, userInfo]);\n\n  useEffect(() => {\n    // Проверка аутентификации\n    const auth = localStorage.getItem('isAuthenticated');\n    const role = localStorage.getItem('userRole');\n    const currentUserStr = localStorage.getItem('currentUser');\n    \n    if (auth !== 'true' || role !== 'admin') {\n      navigate('/admin/login');\n      return;\n    }\n\n    const loadData = async () => {\n      if (currentUserStr) {\n        const currentUser = JSON.parse(currentUserStr);\n        setUserInfo(currentUser);\n        \n        try {\n          // Загрузка данных ресторана\n          const resData = await getRestaurantData(currentUser.restaurantId);\n          const resOrders = await getRestaurantOrders(currentUser.restaurantId);\n          \n          if (resData) {\n            setRestaurantData(resData);\n          }\n          \n          // Получаем первые 10 заказов\n          setRecentOrders(resOrders.slice(0, 10));\n          setIsAuthenticated(true);\n        } catch (error) {\n          console.error('Ошибка загрузки данных:', error);\n        }\n      } else {\n        navigate('/admin/login');\n      }\n      \n      setLoading(false);\n    };\n\n    loadData();\n  }, [navigate]);\n\n  // Добавляем отдельный useEffect для вычисления популярных товаров\n  useEffect(() => {\n    if (userInfo && recentOrders.length > 0) {\n      setPopularItems(calculatePopularItems());\n    }\n  }, [calculatePopularItems, userInfo, recentOrders]);\n\n  const handleLogout = () => {\n    localStorage.removeItem('currentUser');\n    localStorage.removeItem('isAuthenticated');\n    localStorage.removeItem('userRole');\n    navigate('/');\n  };\n\n  const handleEditMenu = () => {\n    navigate('/admin/menu-management');\n  };\n\n  const handleProfileClick = () => {\n    navigate('/owner/profile');\n  };\n\n  if (loading) {\n    return (\n      <Container>\n        <div style={{ \n          display: 'flex', \n          justifyContent: 'center', \n          alignItems: 'center', \n          height: '100vh',\n          color: 'var(--text-color)'\n        }}>\n          Загрузка...\n        </div>\n      </Container>\n    );\n  }\n\n  if (!isAuthenticated || !restaurantData) {\n    return null;\n  }\n\n  return (\n    <Container>\n      <DashboardHeader>\n        <div>\n          <Title>Панель управления ресторана</Title>\n          {userInfo?.restaurantId === 0 && (\n            <div style={{ color: 'var(--text-muted)', fontSize: '0.9rem', marginTop: '8px' }}>\n              Режим администратора (доступ ко всем ресторанам)\n            </div>\n          )}\n          {userInfo?.restaurantId !== 0 && restaurantData && (\n            <div style={{ color: 'var(--text-muted)', fontSize: '0.9rem', marginTop: '8px' }}>\n              {restaurantData.name}\n            </div>\n          )}\n        </div>\n        <LogoutButton onClick={handleLogout}>Выйти</LogoutButton>\n      </DashboardHeader>\n      \n      <MainContent>\n        <SectionTitle>Общая статистика</SectionTitle>\n        <StatsGrid>\n          <StatCard>\n            <StatLabel>Всего заказов</StatLabel>\n            <StatValue>{restaurantData.totalOrders}</StatValue>\n          </StatCard>\n          <StatCard>\n            <StatLabel>Выручка</StatLabel>\n            <StatValue>₽{restaurantData.totalRevenue.toLocaleString()}</StatValue>\n          </StatCard>\n          <StatCard>\n            <StatLabel>Чистая прибыль</StatLabel>\n            <StatValue>₽{restaurantData.netProfit.toLocaleString()}</StatValue>\n          </StatCard>\n          <StatCard>\n            <StatLabel>Средний чек</StatLabel>\n            <StatValue>₽{restaurantData.averageOrderValue.toLocaleString()}</StatValue>\n          </StatCard>\n        </StatsGrid>\n\n        <SectionTitle>Последние заказы</SectionTitle>\n        {recentOrders.length > 0 ? (\n          <OrdersTable>\n            <TableHead>\n              <TableCell>ID</TableCell>\n              <TableCell>Клиент</TableCell>\n              <TableCell>Дата</TableCell>\n              <TableCell>Сумма</TableCell>\n              <TableCell>Статус</TableCell>\n            </TableHead>\n            {recentOrders.map((order) => (\n              <TableRow key={order.id}>\n                <TableCell>#{order.id}</TableCell>\n                <TableCell>{order.customer}</TableCell>\n                <TableCell>{order.date}</TableCell>\n                <TableCell>₽{order.amount.toLocaleString()}</TableCell>\n                <TableCell>\n                  <StatusBadge status={order.status}>\n                    {order.status === 'completed' && 'Выполнен'}\n                    {order.status === 'pending' && 'Ожидает'}\n                    {order.status === 'cancelled' && 'Отменен'}\n                  </StatusBadge>\n                </TableCell>\n              </TableRow>\n            ))}\n          </OrdersTable>\n        ) : (\n          <div style={{ textAlign: 'center', padding: 'var(--spacing-lg)', color: 'var(--text-muted)' }}>\n            Нет заказов для отображения\n          </div>\n        )}\n\n        <SectionTitle>Популярные блюда</SectionTitle>\n        {popularItems.length > 0 ? (\n          <MenuGrid>\n            {popularItems.map((item) => (\n              <MenuCard key={item.id}>\n                <MenuImage style={{ backgroundImage: `url(${item.image})` }} />\n                <MenuInfo>\n                  <MenuName>{item.name}</MenuName>\n                  <MenuPrice>₽{item.price}</MenuPrice>\n                </MenuInfo>\n              </MenuCard>\n            ))}\n          </MenuGrid>\n        ) : (\n          <div style={{ textAlign: 'center', padding: 'var(--spacing-lg)', color: 'var(--text-muted)' }}>\n            Недостаточно данных для анализа популярных блюд\n          </div>\n        )}\n\n        <Button onClick={handleEditMenu}>Редактировать меню</Button>\n\n        <button \n          className=\"dashboard-action-btn\"\n          onClick={handleProfileClick}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n            <path d=\"M17 3a2.83 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3Z\"/>\n          </svg>\n          Профиль ресторана\n        </button>\n      </MainContent>\n    </Container>\n  );\n};\n\nexport default AdminDashboardPage; "],"names":["Container","styled","PageTransition","DashboardHeader","div","Title","h1","LogoutButton","button","MainContent","StatsGrid","StatCard","StatValue","StatLabel","SectionTitle","h2","MenuGrid","MenuCard","MenuImage","MenuInfo","MenuName","MenuPrice","Button","OrdersTable","TableHead","TableRow","TableCell","StatusBadge","span","props","status","AdminDashboardPage","navigate","useNavigate","isAuthenticated","setIsAuthenticated","useState","restaurantData","setRestaurantData","recentOrders","setRecentOrders","loading","setLoading","userInfo","setUserInfo","popularItems","setPopularItems","calculatePopularItems","useCallback","itemCounter","mockMenuItems","getRestaurantMenu","restaurantId","forEach","order","async","menuItemsData","randomItems","length","randomItemCount","Math","floor","random","i","menuItem","quantity","push","id","name","price","generateRandomItems","then","items","item","count","sortedItems","Object","values","sort","a","b","image","slice","map","useEffect","auth","localStorage","getItem","role","currentUserStr","currentUser","JSON","parse","resData","getRestaurantData","resOrders","getRestaurantOrders","error","console","loadData","_jsx","children","style","display","justifyContent","alignItems","height","color","_jsxs","fontSize","marginTop","onClick","handleLogout","removeItem","totalOrders","totalRevenue","toLocaleString","netProfit","averageOrderValue","customer","date","amount","textAlign","padding","backgroundImage","handleEditMenu","className","handleProfileClick","xmlns","width","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d"],"sourceRoot":""}