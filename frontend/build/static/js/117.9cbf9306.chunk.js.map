{"version":3,"file":"static/js/117.9cbf9306.chunk.js","mappings":"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","sources":["components/Navigation.tsx","pages/ProfilePage.tsx","components/CartButton.tsx","components/Header.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { useAppContext } from '../contexts/AppContext';\n\n// Обновленная навигационная панель в стиле Apple/Nvidia\nconst NavContainer = styled.nav`\n  display: flex;\n  justify-content: space-between;\n  background-color: var(--card-bg);\n  border-radius: var(--border-radius-md);\n  margin: var(--spacing-md) 0;\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);\n  overflow: hidden;\n  \n  @media (max-width: 767px) {\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: 100;\n    border-radius: var(--border-radius-md) var(--border-radius-md) 0 0;\n    box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.12);\n    margin: 0;\n  }\n`;\n\n// Улучшенная навигационная кнопка с визуальными эффектами\nconst NavButton = styled.button<{ active?: boolean }>`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: var(--spacing-md) var(--spacing-sm);\n  background: ${props => props.active ? 'linear-gradient(to bottom, rgba(var(--primary-color-rgb), 0.08), transparent)' : 'transparent'};\n  border: none;\n  color: ${props => props.active ? 'var(--primary-color)' : 'var(--text-secondary)'};\n  font-size: 0.9rem;\n  position: relative;\n  transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n  cursor: pointer;\n  font-weight: ${props => props.active ? '600' : '500'};\n  \n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n  \n  &::after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    width: ${props => props.active ? '40%' : '0'};\n    height: 3px;\n    background-color: var(--primary-color);\n    border-radius: 3px 3px 0 0;\n    transition: width 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n  }\n  \n  &:hover:not(:disabled) {\n    color: var(--primary-color);\n    background-color: rgba(var(--primary-color-rgb), 0.05);\n    \n    &::after {\n      width: ${props => props.active ? '60%' : '30%'};\n    }\n    \n    svg {\n      transform: translateY(-2px);\n    }\n  }\n  \n  svg {\n    margin-bottom: var(--spacing-xs);\n    width: 20px;\n    height: 20px;\n    stroke-width: 2;\n    transition: transform 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n  }\n  \n  @media (max-width: 767px) {\n    padding: var(--spacing-sm) var(--spacing-xs);\n    font-size: 0.8rem;\n    \n    svg {\n      width: 22px;\n      height: 22px;\n    }\n  }\n`;\n\nconst Navigation: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { \n    selectedCity, \n    selectedRestaurant, \n    restaurants,\n    deliveryMethod,\n    setDeliveryMethod\n  } = useAppContext();\n  \n  const [activeTab, setActiveTab] = useState('home');\n  \n  // Определяем активную вкладку на основе текущего URL\n  useEffect(() => {\n    if (location.pathname.includes('city-selection')) {\n      setActiveTab('city');\n    } else if (location.pathname.includes('restaurant-selection')) {\n      setActiveTab('restaurant');\n    } else if (location.pathname === '/') {\n      setActiveTab('home');\n    }\n  }, [location.pathname]);\n  \n  // Получаем данные о выбранном ресторане\n  const selectedRestaurantData = selectedRestaurant !== null\n    ? restaurants.find(r => r.id === selectedRestaurant)\n    : null;\n  \n  return (\n    <NavContainer>\n      <NavButton \n        onClick={() => { navigate('/city-selection') }}\n        active={activeTab === 'city'}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n          <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7z\"></path>\n          <circle cx=\"12\" cy=\"9\" r=\"2.5\"></circle>\n        </svg>\n        {selectedCity ? selectedCity.name : 'Город'}\n      </NavButton>\n      \n      <NavButton \n        onClick={() => { selectedCity && navigate(selectedRestaurant ? '/home' : '/restaurant-selection') }}\n        disabled={!selectedCity}\n        active={activeTab === 'restaurant'}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n          <path d=\"M17 11H3c-.6 0-1 .4-1 1v9c0 .6.4 1 1 1h14c.6 0 1-.4 1-1v-9c0-.6-.4-1-1-1Z\"></path>\n          <path d=\"M14 11V6c0-2.8-2.2-5-5-5S4 3.2 4 6v5\"></path>\n          <path d=\"M21 11v9c0 .6-.4 1-1 1h-2c-.6 0-1-.4-1-1v-9c0-.6.4-1 1-1h2c.6 0 1 .4 1 1Z\"></path>\n        </svg>\n        {selectedRestaurantData ? selectedRestaurantData.name : 'Ресторан'}\n      </NavButton>\n      \n      <NavButton \n        onClick={() => setDeliveryMethod('delivery')}\n        active={deliveryMethod === 'delivery'}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n          <circle cx=\"7\" cy=\"17\" r=\"2\"></circle>\n          <circle cx=\"17\" cy=\"17\" r=\"2\"></circle>\n          <path d=\"M5 17H3v-6l2-2h8l3 3h1a2 2 0 0 1 2 2v3h-2\"></path>\n          <path d=\"M15 8h5l-1.5 5h-5\"></path>\n        </svg>\n        Доставка\n      </NavButton>\n      \n      <NavButton \n        onClick={() => setDeliveryMethod('pickup')}\n        active={deliveryMethod === 'pickup'}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n          <path d=\"M4 10h12\"></path>\n          <path d=\"M4 14h9\"></path>\n          <path d=\"M4 18h6\"></path>\n          <path d=\"M18 15v6\"></path>\n          <path d=\"M15 18h6\"></path>\n          <path d=\"m14.5 7.5-8-4-2 3 8 4Z\"></path>\n        </svg>\n        Самовывоз\n      </NavButton>\n    </NavContainer>\n  );\n};\n\nexport default Navigation; ","import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Container, \n  MainContent, \n  ProfileHeading, \n  ProfileSection,\n  OrderHistoryItem,\n  OrderDate,\n  OrderTotal,\n  AddressSection,\n  FormGroup,\n  Label,\n  Input,\n  OptionButtons,\n  OptionButton,\n  Badge,\n  Divider,\n  EmptyState,\n  PageTransition\n} from '../styles/Components';\nimport Header from '../components/Header';\nimport Navigation from '../components/Navigation';\nimport CartButton from '../components/CartButton';\nimport { useAppContext } from '../contexts/AppContext';\nimport useTelegram from '../hooks/useTelegram';\nimport styled from 'styled-components';\n\ntype ProfileTab = 'orders' | 'address';\n\nconst ProfileContainer = styled(PageTransition)`\n  min-height: 70vh;\n`;\n\nconst TabContainer = styled(OptionButtons)`\n  position: sticky;\n  top: 0;\n  z-index: 10;\n  background-color: var(--background-color);\n  padding: var(--spacing-sm) 0;\n  margin-bottom: var(--spacing-lg);\n`;\n\nconst TabButton = styled(OptionButton)`\n  border-radius: var(--border-radius-lg);\n  font-weight: 500;\n  padding: var(--spacing-sm) var(--spacing-md);\n  \n  svg {\n    margin-right: var(--spacing-xs);\n  }\n`;\n\nconst AddressForm = styled.form`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: var(--spacing-md);\n  \n  @media (max-width: 600px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nconst FullWidthFormGroup = styled(FormGroup)`\n  grid-column: span 2;\n  \n  @media (max-width: 600px) {\n    grid-column: span 1;\n  }\n`;\n\nconst SaveButton = styled.button`\n  background-color: var(--primary-color);\n  color: white;\n  padding: var(--spacing-md);\n  border-radius: var(--border-radius-md);\n  font-weight: 600;\n  width: 100%;\n  margin-top: var(--spacing-md);\n  \n  &:hover {\n    background-color: var(--primary-light);\n  }\n`;\n\nconst EnhancedOrderItem = styled(OrderHistoryItem)`\n  background-color: var(--card-bg);\n  margin-bottom: var(--spacing-md);\n  border-radius: var(--border-radius-md);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  border: none;\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  }\n`;\n\nconst OrderHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: var(--spacing-sm);\n`;\n\nconst OrderId = styled.span`\n  font-weight: 600;\n  color: var(--text-color);\n`;\n\nconst OrderStatus = styled.span<{ $status: string }>`\n  padding: 4px 8px;\n  border-radius: 20px;\n  font-size: 0.8rem;\n  font-weight: 600;\n  background-color: ${props => {\n    switch(props.$status) {\n      case 'delivered': return '#4CAF50';\n      case 'cancelled': return '#F44336';\n      default: return '#FF9800';\n    }\n  }};\n  color: white;\n`;\n\nconst OrderItemList = styled.div`\n  background-color: rgba(0, 0, 0, 0.1);\n  padding: var(--spacing-sm);\n  border-radius: var(--border-radius-sm);\n  margin-bottom: var(--spacing-sm);\n`;\n\nconst OrderItem = styled.div`\n  background-color: var(--card-bg);\n  border-radius: var(--border-radius-md);\n  padding: var(--spacing-md);\n  margin-bottom: var(--spacing-md);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  cursor: pointer;\n  transition: all 0.3s ease;\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  }\n`;\n\nconst OrderItemName = styled.span`\n  color: var(--text-color);\n`;\n\nconst OrderItemPrice = styled.span`\n  color: var(--text-secondary);\n`;\n\nconst OrderFooter = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: var(--spacing-sm);\n`;\n\nconst ProfilePage: React.FC = () => {\n  const [activeTab, setActiveTab] = useState<ProfileTab>('orders');\n  const [saved, setSaved] = useState(false);\n  const navigate = useNavigate();\n  const { \n    orderHistory, \n    userAddress,\n    updateUserAddress\n  } = useAppContext();\n  \n  const { \n    showBackButton, \n    hideBackButton, \n    setBackButtonCallback, \n    hideMainButton\n  } = useTelegram();\n\n  useEffect(() => {\n    showBackButton();\n    hideMainButton();\n    \n    setBackButtonCallback(() => {\n      navigate('/');\n    });\n\n    return () => {\n      hideBackButton();\n    };\n  }, [hideBackButton, hideMainButton, navigate, setBackButtonCallback, showBackButton]);\n\n  const handleAddressChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    updateUserAddress({\n      ...userAddress || {\n        name: '',\n        phone: '',\n        address: '',\n        city: '',\n      },\n      [name]: value\n    });\n    setSaved(false);\n  };\n\n  const handleSaveAddress = (e: React.FormEvent) => {\n    e.preventDefault();\n    setSaved(true);\n    // In a real app, you would also save this to the backend\n  };\n\n  const formatDate = (isoString: string) => {\n    const date = new Date(isoString);\n    return date.toLocaleString();\n  };\n\n  const getStatusText = (status: string) => {\n    switch(status) {\n      case 'delivered': return 'Доставлен';\n      case 'cancelled': return 'Отменен';\n      default: return 'В обработке';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'Ожидает подтверждения';\n      case 'confirmed':\n        return 'Подтвержден';\n      case 'preparing':\n        return 'Готовится';\n      case 'ready':\n        return 'Готов к выдаче';\n      case 'delivered':\n        return 'Доставлен';\n      case 'rejected':\n        return 'Отклонен';\n      default:\n        return 'В обработке';\n    }\n  };\n  \n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return '#FFC107'; // желтый\n      case 'confirmed':\n        return '#2196F3'; // синий\n      case 'preparing':\n        return '#9C27B0'; // фиолетовый\n      case 'ready':\n        return '#4CAF50'; // зеленый\n      case 'delivered':\n        return '#8BC34A'; // светло-зеленый\n      case 'rejected':\n        return '#F44336'; // красный\n      default:\n        return '#607D8B'; // серый\n    }\n  };\n  \n  const handleOrderClick = (orderId: number) => {\n    navigate(`/orders/${orderId}`);\n  };\n\n  return (\n    <ProfileContainer>\n      <Container>\n        <Header />\n        <Navigation />\n        <MainContent>\n          <ProfileHeading>Ваш профиль</ProfileHeading>\n          \n          <TabContainer>\n            <TabButton \n              onClick={() => setActiveTab('orders')} \n              $active={activeTab === 'orders'}\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                <rect x=\"2\" y=\"3\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\"></rect>\n                <line x1=\"8\" y1=\"21\" x2=\"16\" y2=\"21\"></line>\n                <line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"21\"></line>\n              </svg>\n              История заказов\n            </TabButton>\n            <TabButton \n              onClick={() => setActiveTab('address')} \n              $active={activeTab === 'address'}\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\"></path>\n                <circle cx=\"12\" cy=\"10\" r=\"3\"></circle>\n              </svg>\n              Адрес доставки\n            </TabButton>\n          </TabContainer>\n          \n          {activeTab === 'address' && (\n            <AddressSection>\n              <ProfileHeading>Адрес доставки</ProfileHeading>\n              {saved && (\n                <div style={{ \n                  padding: 'var(--spacing-sm)', \n                  backgroundColor: '#4CAF50', \n                  color: 'white', \n                  borderRadius: 'var(--border-radius-sm)',\n                  marginBottom: 'var(--spacing-md)',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center'\n                }}>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" style={{ marginRight: '8px' }}>\n                    <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\n                    <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\n                  </svg>\n                  Адрес успешно сохранен!\n                </div>\n              )}\n              <AddressForm onSubmit={handleSaveAddress}>\n                <FormGroup>\n                  <Label htmlFor=\"name\">Имя</Label>\n                  <Input\n                    type=\"text\"\n                    id=\"name\"\n                    name=\"name\"\n                    value={userAddress?.name || ''}\n                    onChange={handleAddressChange}\n                    placeholder=\"Введите ваше имя\"\n                    required\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label htmlFor=\"phone\">Телефон</Label>\n                  <Input\n                    type=\"tel\"\n                    id=\"phone\"\n                    name=\"phone\"\n                    value={userAddress?.phone || ''}\n                    onChange={handleAddressChange}\n                    placeholder=\"+7 (___) ___-__-__\"\n                    required\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label htmlFor=\"city\">Город</Label>\n                  <Input\n                    type=\"text\"\n                    id=\"city\"\n                    name=\"city\"\n                    value={\n                      typeof userAddress?.city === 'object' && userAddress?.city !== null\n                        ? userAddress.city.name || ''\n                        : String(userAddress?.city || '')\n                    }\n                    onChange={handleAddressChange}\n                    placeholder=\"Введите название города\"\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label htmlFor=\"address\">Адрес доставки</Label>\n                  <Input\n                    type=\"text\"\n                    id=\"address\"\n                    name=\"address\"\n                    value={userAddress?.address || ''}\n                    onChange={handleAddressChange}\n                    placeholder=\"Улица, дом, квартира\"\n                  />\n                </FormGroup>\n                <FullWidthFormGroup>\n                  <SaveButton type=\"submit\">\n                    Сохранить адрес\n                  </SaveButton>\n                </FullWidthFormGroup>\n              </AddressForm>\n            </AddressSection>\n          )}\n          \n          {activeTab === 'orders' && (\n            <ProfileSection>\n              <ProfileHeading>История заказов</ProfileHeading>\n              \n              {orderHistory.length === 0 ? (\n                <EmptyState>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <circle cx=\"9\" cy=\"21\" r=\"1\"></circle>\n                    <circle cx=\"20\" cy=\"21\" r=\"1\"></circle>\n                    <path d=\"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6\"></path>\n                  </svg>\n                  <h3>Нет заказов</h3>\n                  <p>Вы еще не сделали ни одного заказа.</p>\n                  <SaveButton onClick={() => navigate('/')}>\n                    Посмотреть меню\n                  </SaveButton>\n                </EmptyState>\n              ) : (\n                orderHistory.map(order => (\n                  <OrderItem key={order.id} onClick={() => handleOrderClick(order.id)}>\n                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 'var(--spacing-sm)' }}>\n                      <div style={{ fontWeight: 'bold' }}>Заказ #{order.id}</div>\n                      <div style={{ \n                        display: 'inline-block',\n                        padding: '4px 8px',\n                        borderRadius: '12px',\n                        fontSize: '0.8rem',\n                        fontWeight: 'bold',\n                        color: 'white',\n                        backgroundColor: getStatusColor(order.status)\n                      }}>\n                        {getStatusLabel(order.status)}\n                      </div>\n                    </div>\n                    <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: '0.9rem', color: 'var(--text-secondary)', marginBottom: 'var(--spacing-sm)' }}>\n                      <div>{formatDate(order.date)}</div>\n                      <div>{order.deliveryMethod === 'delivery' ? 'Доставка' : 'Самовывоз'}</div>\n                    </div>\n                    <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: 'var(--spacing-sm)' }}>\n                      <div style={{ fontSize: '0.9rem' }}>\n                        {order.items.length} {order.items.length === 1 ? 'товар' : order.items.length >= 2 && order.items.length <= 4 ? 'товара' : 'товаров'}\n                      </div>\n                      <div style={{ fontWeight: 'bold', color: 'var(--primary-color)' }}>₽{order.totalAmount}</div>\n                    </div>\n                  </OrderItem>\n                ))\n              )}\n            </ProfileSection>\n          )}\n        </MainContent>\n        <CartButton />\n      </Container>\n    </ProfileContainer>\n  );\n};\n\nexport default ProfilePage; ","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { useAppContext } from '../contexts/AppContext';\n\n// Плавающая кнопка корзины в стиле Apple/Nvidia\nconst CartButtonContainer = styled.button`\n  position: fixed;\n  bottom: 80px;\n  right: 20px;\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  background-color: var(--primary-color);\n  color: white;\n  border: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  box-shadow: 0 4px 16px rgba(var(--primary-color-rgb), 0.4);\n  transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n  z-index: 99;\n  \n  svg {\n    width: 24px;\n    height: 24px;\n    stroke-width: 2;\n    transition: transform 0.3s ease;\n  }\n  \n  span {\n    position: absolute;\n    top: -8px;\n    right: -8px;\n    background-color: var(--secondary-color);\n    color: white;\n    font-size: 0.75rem;\n    font-weight: 700;\n    min-width: 22px;\n    height: 22px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 0 4px;\n    border: 2px solid var(--background-color);\n    transform-origin: center;\n    transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);\n  }\n  \n  &:hover {\n    transform: translateY(-4px) scale(1.05);\n    box-shadow: 0 8px 24px rgba(var(--primary-color-rgb), 0.5);\n    \n    svg {\n      transform: scale(1.1);\n    }\n    \n    span {\n      transform: scale(1.1);\n    }\n  }\n  \n  &:active {\n    transform: translateY(-2px) scale(1.02);\n    box-shadow: 0 6px 20px rgba(var(--primary-color-rgb), 0.45);\n  }\n  \n  @media (max-width: 767px) {\n    bottom: 80px;\n    right: 16px;\n    width: 52px;\n    height: 52px;\n  }\n`;\n\n// Анимация появления для количества товаров в корзине\nconst cartItemAppear = `\n  @keyframes cartItemAppear {\n    0% {\n      transform: scale(0);\n      opacity: 0;\n    }\n    50% {\n      transform: scale(1.2);\n    }\n    100% {\n      transform: scale(1);\n      opacity: 1;\n    }\n  }\n`;\n\nconst CartButton: React.FC = () => {\n  const navigate = useNavigate();\n  const { cart } = useAppContext();\n  \n  // Подсчитываем общее количество товаров в корзине\n  const totalItems = cart.reduce((total, item) => total + item.quantity, 0);\n  \n  return (\n    <CartButtonContainer onClick={() => navigate('/cart')}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n        <circle cx=\"8\" cy=\"21\" r=\"1\"></circle>\n        <circle cx=\"19\" cy=\"21\" r=\"1\"></circle>\n        <path d=\"M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12\"></path>\n      </svg>\n      {totalItems > 0 && <span>{totalItems}</span>}\n      <style>\n        {cartItemAppear}\n      </style>\n    </CartButtonContainer>\n  );\n};\n\nexport default CartButton; ","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { useAppContext } from '../contexts/AppContext';\n\n// Современный контейнер шапки в стиле Apple/Nvidia\nconst HeaderContainer = styled.header`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: var(--spacing-md) 0;\n  position: relative;\n  \n  &::after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 1px;\n    background: linear-gradient(\n      to right,\n      transparent,\n      var(--border-color),\n      transparent\n    );\n    opacity: 0.6;\n  }\n`;\n\n// Контейнер логотипа с анимацией\nconst LogoContainer = styled.div`\n  cursor: pointer;\n  transition: transform 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n  \n  &:hover {\n    transform: scale(1.05);\n  }\n  \n  img {\n    height: 38px;\n    object-fit: contain;\n    \n    @media (max-width: 767px) {\n      height: 32px;\n    }\n  }\n`;\n\n// Анимированная кнопка профиля\nconst ProfileButton = styled.button`\n  background: none;\n  border: none;\n  color: var(--text-color);\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n  \n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(to bottom right, \n                 rgba(var(--primary-color-rgb), 0.1), \n                 rgba(var(--primary-color-rgb), 0));\n    opacity: 0;\n    transition: opacity 0.3s ease;\n    z-index: -1;\n    border-radius: 50%;\n  }\n  \n  &:hover {\n    transform: translateY(-2px);\n    color: var(--primary-color);\n    \n    &::before {\n      opacity: 1;\n    }\n    \n    svg {\n      stroke-width: 2.2;\n    }\n  }\n  \n  &:active {\n    transform: translateY(0);\n  }\n  \n  svg {\n    width: 24px;\n    height: 24px;\n    transition: all 0.3s ease;\n  }\n`;\n\n// Компонент логотипа с изображением\nconst Logo = styled.img`\n  height: 38px;\n  object-fit: contain;\n  transition: filter 0.3s ease;\n  \n  @media (max-width: 767px) {\n    height: 32px;\n  }\n`;\n\nconst Header: React.FC = () => {\n  const navigate = useNavigate();\n  const { selectedCity, selectedRestaurant } = useAppContext();\n\n  return (\n    <HeaderContainer>\n      <LogoContainer onClick={() => navigate('/')}>\n        <Logo src=\"/assets/images/logo.png\" alt=\"Kulcha\" />\n      </LogoContainer>\n      \n      <ProfileButton onClick={() => navigate('/profile')}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n          <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path>\n          <circle cx=\"12\" cy=\"7\" r=\"4\"></circle>\n        </svg>\n      </ProfileButton>\n    </HeaderContainer>\n  );\n};\n\nexport default Header; "],"names":["NavContainer","styled","nav","NavButton","button","props","active","Navigation","navigate","useNavigate","location","useLocation","selectedCity","selectedRestaurant","restaurants","deliveryMethod","setDeliveryMethod","useAppContext","activeTab","setActiveTab","useState","useEffect","pathname","includes","selectedRestaurantData","find","r","id","_jsxs","children","onClick","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","_jsx","d","cx","cy","name","disabled","ProfileContainer","PageTransition","TabContainer","OptionButtons","TabButton","OptionButton","AddressForm","form","FullWidthFormGroup","FormGroup","SaveButton","OrderItem","OrderHistoryItem","div","span","$status","ProfilePage","saved","setSaved","orderHistory","userAddress","updateUserAddress","showBackButton","hideBackButton","setBackButtonCallback","hideMainButton","useTelegram","handleAddressChange","e","value","target","phone","address","city","getStatusLabel","status","getStatusColor","Container","Header","MainContent","ProfileHeading","$active","x","y","rx","ry","x1","y1","x2","y2","AddressSection","style","padding","backgroundColor","color","borderRadius","marginBottom","display","alignItems","justifyContent","marginRight","points","onSubmit","preventDefault","Label","htmlFor","Input","type","onChange","placeholder","required","String","ProfileSection","length","EmptyState","map","order","handleOrderClick","orderId","fontWeight","fontSize","isoString","date","Date","toLocaleString","marginTop","items","totalAmount","CartButton","CartButtonContainer","cart","totalItems","reduce","total","item","quantity","HeaderContainer","header","LogoContainer","ProfileButton","Logo","img","src","alt"],"sourceRoot":""}