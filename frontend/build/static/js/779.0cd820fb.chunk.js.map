{"version":3,"file":"static/js/779.0cd820fb.chunk.js","mappings":"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","sources":["components/Navigation.tsx","components/CartButton.tsx","components/Header.tsx","pages/CitySelectionPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { useAppContext } from '../contexts/AppContext';\n\n// Обновленная навигационная панель в стиле Apple/Nvidia\nconst NavContainer = styled.nav`\n  display: flex;\n  justify-content: space-between;\n  background-color: var(--card-bg);\n  border-radius: var(--border-radius-md);\n  margin: var(--spacing-md) 0;\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);\n  overflow: hidden;\n  \n  @media (max-width: 767px) {\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: 100;\n    border-radius: var(--border-radius-md) var(--border-radius-md) 0 0;\n    box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.12);\n    margin: 0;\n  }\n`;\n\n// Улучшенная навигационная кнопка с визуальными эффектами\nconst NavButton = styled.button<{ active?: boolean }>`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: var(--spacing-md) var(--spacing-sm);\n  background: ${props => props.active ? 'linear-gradient(to bottom, rgba(var(--primary-color-rgb), 0.08), transparent)' : 'transparent'};\n  border: none;\n  color: ${props => props.active ? 'var(--primary-color)' : 'var(--text-secondary)'};\n  font-size: 0.9rem;\n  position: relative;\n  transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n  cursor: pointer;\n  font-weight: ${props => props.active ? '600' : '500'};\n  \n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n  \n  &::after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    width: ${props => props.active ? '40%' : '0'};\n    height: 3px;\n    background-color: var(--primary-color);\n    border-radius: 3px 3px 0 0;\n    transition: width 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n  }\n  \n  &:hover:not(:disabled) {\n    color: var(--primary-color);\n    background-color: rgba(var(--primary-color-rgb), 0.05);\n    \n    &::after {\n      width: ${props => props.active ? '60%' : '30%'};\n    }\n    \n    svg {\n      transform: translateY(-2px);\n    }\n  }\n  \n  svg {\n    margin-bottom: var(--spacing-xs);\n    width: 20px;\n    height: 20px;\n    stroke-width: 2;\n    transition: transform 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n  }\n  \n  @media (max-width: 767px) {\n    padding: var(--spacing-sm) var(--spacing-xs);\n    font-size: 0.8rem;\n    \n    svg {\n      width: 22px;\n      height: 22px;\n    }\n  }\n`;\n\nconst Navigation: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { \n    selectedCity, \n    selectedRestaurant, \n    restaurants,\n    deliveryMethod,\n    setDeliveryMethod\n  } = useAppContext();\n  \n  const [activeTab, setActiveTab] = useState('home');\n  \n  // Определяем активную вкладку на основе текущего URL\n  useEffect(() => {\n    if (location.pathname.includes('city-selection')) {\n      setActiveTab('city');\n    } else if (location.pathname.includes('restaurant-selection')) {\n      setActiveTab('restaurant');\n    } else if (location.pathname === '/') {\n      setActiveTab('home');\n    }\n  }, [location.pathname]);\n  \n  // Получаем данные о выбранном ресторане\n  const selectedRestaurantData = selectedRestaurant !== null\n    ? restaurants.find(r => r.id === selectedRestaurant)\n    : null;\n  \n  return (\n    <NavContainer>\n      <NavButton \n        onClick={() => { navigate('/city-selection') }}\n        active={activeTab === 'city'}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n          <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7z\"></path>\n          <circle cx=\"12\" cy=\"9\" r=\"2.5\"></circle>\n        </svg>\n        {selectedCity ? selectedCity.name : 'Город'}\n      </NavButton>\n      \n      <NavButton \n        onClick={() => { selectedCity && navigate(selectedRestaurant ? '/home' : '/restaurant-selection') }}\n        disabled={!selectedCity}\n        active={activeTab === 'restaurant'}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n          <path d=\"M17 11H3c-.6 0-1 .4-1 1v9c0 .6.4 1 1 1h14c.6 0 1-.4 1-1v-9c0-.6-.4-1-1-1Z\"></path>\n          <path d=\"M14 11V6c0-2.8-2.2-5-5-5S4 3.2 4 6v5\"></path>\n          <path d=\"M21 11v9c0 .6-.4 1-1 1h-2c-.6 0-1-.4-1-1v-9c0-.6.4-1 1-1h2c.6 0 1 .4 1 1Z\"></path>\n        </svg>\n        {selectedRestaurantData ? selectedRestaurantData.name : 'Ресторан'}\n      </NavButton>\n      \n      <NavButton \n        onClick={() => setDeliveryMethod('delivery')}\n        active={deliveryMethod === 'delivery'}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n          <circle cx=\"7\" cy=\"17\" r=\"2\"></circle>\n          <circle cx=\"17\" cy=\"17\" r=\"2\"></circle>\n          <path d=\"M5 17H3v-6l2-2h8l3 3h1a2 2 0 0 1 2 2v3h-2\"></path>\n          <path d=\"M15 8h5l-1.5 5h-5\"></path>\n        </svg>\n        Доставка\n      </NavButton>\n      \n      <NavButton \n        onClick={() => setDeliveryMethod('pickup')}\n        active={deliveryMethod === 'pickup'}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n          <path d=\"M4 10h12\"></path>\n          <path d=\"M4 14h9\"></path>\n          <path d=\"M4 18h6\"></path>\n          <path d=\"M18 15v6\"></path>\n          <path d=\"M15 18h6\"></path>\n          <path d=\"m14.5 7.5-8-4-2 3 8 4Z\"></path>\n        </svg>\n        Самовывоз\n      </NavButton>\n    </NavContainer>\n  );\n};\n\nexport default Navigation; ","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { useAppContext } from '../contexts/AppContext';\n\n// Плавающая кнопка корзины в стиле Apple/Nvidia\nconst CartButtonContainer = styled.button`\n  position: fixed;\n  bottom: 80px;\n  right: 20px;\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  background-color: var(--primary-color);\n  color: white;\n  border: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  box-shadow: 0 4px 16px rgba(var(--primary-color-rgb), 0.4);\n  transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n  z-index: 99;\n  \n  svg {\n    width: 24px;\n    height: 24px;\n    stroke-width: 2;\n    transition: transform 0.3s ease;\n  }\n  \n  span {\n    position: absolute;\n    top: -8px;\n    right: -8px;\n    background-color: var(--secondary-color);\n    color: white;\n    font-size: 0.75rem;\n    font-weight: 700;\n    min-width: 22px;\n    height: 22px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 0 4px;\n    border: 2px solid var(--background-color);\n    transform-origin: center;\n    transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);\n  }\n  \n  &:hover {\n    transform: translateY(-4px) scale(1.05);\n    box-shadow: 0 8px 24px rgba(var(--primary-color-rgb), 0.5);\n    \n    svg {\n      transform: scale(1.1);\n    }\n    \n    span {\n      transform: scale(1.1);\n    }\n  }\n  \n  &:active {\n    transform: translateY(-2px) scale(1.02);\n    box-shadow: 0 6px 20px rgba(var(--primary-color-rgb), 0.45);\n  }\n  \n  @media (max-width: 767px) {\n    bottom: 80px;\n    right: 16px;\n    width: 52px;\n    height: 52px;\n  }\n`;\n\n// Анимация появления для количества товаров в корзине\nconst cartItemAppear = `\n  @keyframes cartItemAppear {\n    0% {\n      transform: scale(0);\n      opacity: 0;\n    }\n    50% {\n      transform: scale(1.2);\n    }\n    100% {\n      transform: scale(1);\n      opacity: 1;\n    }\n  }\n`;\n\nconst CartButton: React.FC = () => {\n  const navigate = useNavigate();\n  const { cart } = useAppContext();\n  \n  // Подсчитываем общее количество товаров в корзине\n  const totalItems = cart.reduce((total, item) => total + item.quantity, 0);\n  \n  return (\n    <CartButtonContainer onClick={() => navigate('/cart')}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n        <circle cx=\"8\" cy=\"21\" r=\"1\"></circle>\n        <circle cx=\"19\" cy=\"21\" r=\"1\"></circle>\n        <path d=\"M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12\"></path>\n      </svg>\n      {totalItems > 0 && <span>{totalItems}</span>}\n      <style>\n        {cartItemAppear}\n      </style>\n    </CartButtonContainer>\n  );\n};\n\nexport default CartButton; ","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { useAppContext } from '../contexts/AppContext';\n\n// Современный контейнер шапки в стиле Apple/Nvidia\nconst HeaderContainer = styled.header`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: var(--spacing-md) 0;\n  position: relative;\n  \n  &::after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 1px;\n    background: linear-gradient(\n      to right,\n      transparent,\n      var(--border-color),\n      transparent\n    );\n    opacity: 0.6;\n  }\n`;\n\n// Контейнер логотипа с анимацией\nconst LogoContainer = styled.div`\n  cursor: pointer;\n  transition: transform 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n  \n  &:hover {\n    transform: scale(1.05);\n  }\n  \n  img {\n    height: 38px;\n    object-fit: contain;\n    \n    @media (max-width: 767px) {\n      height: 32px;\n    }\n  }\n`;\n\n// Анимированная кнопка профиля\nconst ProfileButton = styled.button`\n  background: none;\n  border: none;\n  color: var(--text-color);\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n  \n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(to bottom right, \n                 rgba(var(--primary-color-rgb), 0.1), \n                 rgba(var(--primary-color-rgb), 0));\n    opacity: 0;\n    transition: opacity 0.3s ease;\n    z-index: -1;\n    border-radius: 50%;\n  }\n  \n  &:hover {\n    transform: translateY(-2px);\n    color: var(--primary-color);\n    \n    &::before {\n      opacity: 1;\n    }\n    \n    svg {\n      stroke-width: 2.2;\n    }\n  }\n  \n  &:active {\n    transform: translateY(0);\n  }\n  \n  svg {\n    width: 24px;\n    height: 24px;\n    transition: all 0.3s ease;\n  }\n`;\n\n// Компонент логотипа с изображением\nconst Logo = styled.img`\n  height: 38px;\n  object-fit: contain;\n  transition: filter 0.3s ease;\n  \n  @media (max-width: 767px) {\n    height: 32px;\n  }\n`;\n\nconst Header: React.FC = () => {\n  const navigate = useNavigate();\n  const { selectedCity, selectedRestaurant } = useAppContext();\n\n  return (\n    <HeaderContainer>\n      <LogoContainer onClick={() => navigate('/')}>\n        <Logo src=\"/assets/images/logo.png\" alt=\"Kulcha\" />\n      </LogoContainer>\n      \n      <ProfileButton onClick={() => navigate('/profile')}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n          <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path>\n          <circle cx=\"12\" cy=\"7\" r=\"4\"></circle>\n        </svg>\n      </ProfileButton>\n    </HeaderContainer>\n  );\n};\n\nexport default Header; ","import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, MainContent, ProfileHeading, FormGroup, Label } from '../styles/Components';\nimport Header from '../components/Header';\nimport Navigation from '../components/Navigation';\nimport CartButton from '../components/CartButton';\nimport { useAppContext } from '../contexts/AppContext';\nimport useTelegram from '../hooks/useTelegram';\nimport { FoodGrid, CityCard, CityName, AddToCartButton } from '../styles/Components';\nimport { api } from '../services/api';\nimport { City } from '../types/apiTypes';\nimport styled from 'styled-components';\n\n// Контейнер для строки поиска с иконкой\nconst SearchContainer = styled.div`\n  position: relative;\n  width: 100%;\n  margin-bottom: var(--spacing-lg);\n`;\n\n// Улучшенный стилизованный компонент для строки поиска\nconst SearchInput = styled.input`\n  width: 100%;\n  padding: var(--spacing-md) var(--spacing-md) var(--spacing-md) 48px;\n  border: 2px solid var(--primary-color); /* Оранжевая обводка */\n  border-radius: var(--border-radius-md);\n  font-size: 1rem;\n  background-color: #2F2F2F; /* Серый фон */\n  color: white; /* Белый текст для контраста */\n  transition: all 0.2s ease;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  \n  &:focus {\n    border-color: var(--primary-light);\n    box-shadow: 0 4px 12px rgba(var(--primary-color-rgb), 0.3);\n    outline: none;\n  }\n  \n  &::placeholder {\n    color: #BBBBBB; /* Светло-серый для плейсхолдера */\n  }\n  \n  /* Стили для темной темы */\n  .dark-theme & {\n    background-color: #2A2A2A;\n    border-color: var(--primary-color);\n    color: white;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n    \n    &:focus {\n      border-color: var(--primary-light);\n      box-shadow: 0 4px 12px rgba(var(--primary-color-rgb), 0.35);\n    }\n    \n    &::placeholder {\n      color: #aaa;\n    }\n  }\n`;\n\n// Иконка поиска\nconst SearchIcon = styled.div`\n  position: absolute;\n  left: 15px;\n  top: 50%;\n  transform: translateY(-50%);\n  color: var(--text-secondary);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  pointer-events: none;\n  \n  svg {\n    width: 20px;\n    height: 20px;\n  }\n  \n  .dark-theme & {\n    color: #aaa;\n  }\n`;\n\n// Стиль для сообщения об отсутствии результатов\nconst NoResults = styled.div`\n  text-align: center;\n  padding: var(--spacing-xl);\n  color: var(--text-secondary);\n  width: 100%;\n  background-color: rgba(255, 255, 255, 0.05);\n  border-radius: var(--border-radius-md);\n  margin-top: var(--spacing-md);\n`;\n\nconst CitySelectionPage: React.FC = () => {\n  const navigate = useNavigate();\n  const { selectedCity, setSelectedCity } = useAppContext();\n  const { hideBackButton, hideMainButton } = useTelegram();\n  const [cities, setCities] = useState<City[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  \n  // Загрузка городов при монтировании компонента\n  useEffect(() => {\n    const loadCities = async () => {\n      try {\n        setLoading(true);\n        const citiesData = await api.getCities();\n        // Check if citiesData is an array before setting state\n        if (Array.isArray(citiesData)) {\n          setCities(citiesData);\n        } else {\n          console.error(\"Cities data is not an array:\", citiesData);\n          setCities([]);\n        }\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Failed to load cities:\", error);\n        setLoading(false);\n      }\n    };\n    \n    loadCities();\n  }, []);\n\n  useEffect(() => {\n    if (!loading && cities.length === 0) {\n      // If no cities available, redirect back to home\n      navigate('/');\n    }\n  }, [cities, navigate, loading]);\n\n  useEffect(() => {\n    hideBackButton();\n    hideMainButton();\n    \n    return () => {\n      hideBackButton();\n    };\n  }, [hideBackButton, hideMainButton]);\n\n  // Обработчик изменения строки поиска\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(e.target.value);\n  };\n\n  const handleCitySelect = (cityId: number) => {\n    const city = cities.find(c => c.id === cityId);\n    if (city) {\n      setSelectedCity(city);\n      navigate('/restaurant-selection');\n    }\n  };\n  \n  // Фильтрация городов в соответствии с поисковым запросом\n  const filteredCities = cities.filter(city => \n    city.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  if (loading) {\n    return (\n      <Container>\n        <Header />\n        <Navigation />\n        <MainContent>\n          <ProfileHeading>Загрузка городов...</ProfileHeading>\n        </MainContent>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <Header />\n      <Navigation />\n      <MainContent>\n        <ProfileHeading>Выберите ваш город</ProfileHeading>\n        <div>\n          <FormGroup>\n            <Label htmlFor=\"citySearch\">Поиск города</Label>\n            <SearchContainer>\n              <SearchIcon>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                  <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n                  <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n                </svg>\n              </SearchIcon>\n              <SearchInput\n                id=\"citySearch\"\n                type=\"text\"\n                placeholder=\"Введите название города...\"\n                value={searchQuery}\n                onChange={handleSearchChange}\n                autoComplete=\"off\"\n              />\n            </SearchContainer>\n          </FormGroup>\n          \n          <h3 style={{ marginTop: '30px' }}>\n            {searchQuery ? 'Результаты поиска' : 'Доступные города'}\n          </h3>\n          \n          {filteredCities.length > 0 ? (\n            <FoodGrid>\n              {filteredCities.map(city => (\n                <CityCard \n                  key={city.id} \n                  onClick={() => handleCitySelect(city.id)}\n                >\n                  <CityName>{city.name}</CityName>\n                  <AddToCartButton>\n                    Выбрать город\n                  </AddToCartButton>\n                </CityCard>\n              ))}\n            </FoodGrid>\n          ) : (\n            <NoResults>\n              <p>Города не найдены. Попробуйте изменить запрос.</p>\n            </NoResults>\n          )}\n        </div>\n      </MainContent>\n      <CartButton />\n    </Container>\n  );\n};\n\nexport default CitySelectionPage; "],"names":["NavContainer","styled","nav","NavButton","button","props","active","Navigation","navigate","useNavigate","location","useLocation","selectedCity","selectedRestaurant","restaurants","deliveryMethod","setDeliveryMethod","useAppContext","activeTab","setActiveTab","useState","useEffect","pathname","includes","selectedRestaurantData","find","r","id","_jsxs","children","onClick","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","_jsx","d","cx","cy","name","disabled","CartButtonContainer","CartButton","cart","totalItems","reduce","total","item","quantity","HeaderContainer","header","LogoContainer","div","ProfileButton","Logo","img","Header","src","alt","SearchContainer","SearchInput","input","SearchIcon","NoResults","CitySelectionPage","setSelectedCity","hideBackButton","hideMainButton","useTelegram","cities","setCities","loading","setLoading","searchQuery","setSearchQuery","async","citiesData","api","getCities","Array","isArray","console","error","loadCities","length","filteredCities","filter","city","toLowerCase","Container","MainContent","ProfileHeading","FormGroup","Label","htmlFor","x1","y1","x2","y2","type","placeholder","value","onChange","e","target","autoComplete","style","marginTop","FoodGrid","map","CityCard","cityId","c","handleCitySelect","CityName","AddToCartButton"],"sourceRoot":""}