{"version":3,"file":"static/js/762.05e14bfe.chunk.js","mappings":"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","sources":["pages/owner/OwnerStatisticsPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled, { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { \n  getRestaurantData, \n  getRestaurantOrders,\n  RestaurantAdminData,\n  AdminOrder,\n  getRestaurantStatistics,\n} from '../../data/adminDatabase';\nimport { useAppContext } from '../../contexts/AppContext';\n\n// Добавляем глобальные стили для анимаций\nconst GlobalStyle = createGlobalStyle`\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  background-color: ${props => props.theme.colors.background};\n  color: ${props => props.theme.colors.text};\n  \n  @media (max-width: 768px) {\n    padding-bottom: 60px;\n  }\n`;\n\nconst DashboardHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1.25rem 1.5rem;\n  background-color: ${props => props.theme.colors.header};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n  position: sticky;\n  top: 0;\n  z-index: 10;\n  \n  @media (max-width: 768px) {\n    flex-direction: column;\n    padding: 1rem;\n    gap: 0.75rem;\n  }\n`;\n\nconst HeaderContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  \n  h1 {\n    font-size: 1.5rem;\n    font-weight: 600;\n    margin: 0;\n    color: ${props => props.theme.colors.text};\n  }\n  \n  p {\n    margin: 0.25rem 0 0;\n    font-size: 0.9rem;\n    color: ${props => props.theme.colors.textSecondary};\n  }\n`;\n\nconst ButtonsContainer = styled.div`\n  display: flex;\n  gap: 0.75rem;\n  \n  @media (max-width: 768px) {\n    width: 100%;\n    overflow-x: auto;\n    padding: 0.5rem 0;\n    margin: 0 -0.5rem;\n    padding: 0 0.5rem;\n    \n    &::-webkit-scrollbar {\n      height: 4px;\n    }\n    \n    &::-webkit-scrollbar-thumb {\n      background: rgba(255, 165, 0, 0.5);\n      border-radius: 4px;\n    }\n  }\n`;\n\nconst ActionButton = styled.button<{ $variant?: 'primary' | 'warning' | 'danger' }>`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.6rem 1rem;\n  border-radius: 8px;\n  border: none;\n  font-weight: 500;\n  font-size: 0.875rem;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  background-color: ${props => {\n    switch (props.$variant) {\n      case 'primary': return props.theme.colors.primary;\n      case 'warning': return props.theme.colors.warning;\n      case 'danger': return props.theme.colors.danger;\n      default: return props.theme.colors.primary;\n    }\n  }};\n  color: ${props => props.$variant === 'primary' ? '#000000' : '#FFFFFF'};\n  white-space: nowrap;\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 8px rgba(255, 165, 0, 0.3);\n    opacity: 0.9;\n  }\n  \n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n    transform: none;\n    box-shadow: none;\n  }\n  \n  svg {\n    width: 18px;\n    height: 18px;\n    flex-shrink: 0;\n  }\n  \n  @media (max-width: 768px) {\n    padding: 0.5rem 0.875rem;\n    font-size: 0.8125rem;\n  }\n`;\n\nconst MainContent = styled.div`\n  max-width: 1200px;\n  width: 100%;\n  margin: 0 auto;\n  padding: 1.5rem;\n  flex: 1;\n  \n  @media (max-width: 768px) {\n    padding: 1rem;\n  }\n`;\n\nconst RestaurantInfoCard = styled.div`\n  background-color: ${props => props.theme.colors.card};\n  border-radius: 12px;\n  padding: 1.5rem;\n  margin-bottom: 1.5rem;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  border-left: 4px solid ${props => props.theme.colors.primary};\n  transition: all 0.3s ease;\n  \n  &:hover {\n    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);\n  }\n  \n  @media (max-width: 768px) {\n    padding: 1.25rem;\n    margin-bottom: 1.25rem;\n  }\n`;\n\nconst RestaurantInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n`;\n\nconst RestaurantName = styled.h2`\n  font-size: 1.5rem;\n  margin: 0;\n  font-weight: 600;\n  color: ${props => props.theme.colors.text};\n`;\n\nconst RestaurantAddress = styled.p`\n  font-size: 0.9375rem;\n  color: ${props => props.theme.colors.textSecondary};\n  margin: 0;\n`;\n\nconst RestaurantDescription = styled.p`\n  font-size: 0.9375rem;\n  line-height: 1.5;\n  margin: 0.5rem 0 0;\n  color: ${props => props.theme.colors.text};\n`;\n\n// Обновляю сетку для метрик - теперь фиксированно по 3 блока в строке\nconst MetricsRow = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* Фиксированно 3 колонки */\n  gap: 1.25rem;\n  margin-bottom: 1.5rem;\n  \n  @media (max-width: 992px) {\n    grid-template-columns: repeat(2, 1fr); /* На планшетах 2 колонки */\n  }\n  \n  @media (max-width: 576px) {\n    grid-template-columns: 1fr; /* На мобильных 1 колонка */\n    gap: 1rem;\n    margin-bottom: 1.25rem;\n  }\n`;\n\n// Обертка для метрики, увеличиваю высоту\nconst MetricCardWrapper = styled.div`\n  position: relative;\n  /* Добавляем отступ снизу, чтобы вместить тень и трансформацию */\n  padding-bottom: 8px;\n  /* Все карточки имеют фиксированную высоту в сетке */\n  height: 100%;\n  min-height: 150px; /* Минимальная высота для достаточного размера */\n`;\n\n// Обновляем метрики, увеличивая размеры и улучшая читаемость\nconst MetricCard = styled.div`\n  background-color: ${props => props.theme.colors.card};\n  border-radius: 12px;\n  padding: 1.5rem; /* Больше padding для большего пространства */\n  display: flex;\n  align-items: center;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  /* Используем абсолютное позиционирование для стабильной анимации */\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 8px; /* Оставляем место для тени при трансформации */\n  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n  overflow: hidden; /* Обрезаем контент, который может выходить за пределы */\n  /* Добавляем рамку изначально, но делаем ее прозрачной */\n  border: 1px solid transparent;\n  \n  &:hover {\n    transform: translateY(-3px) scale(1.02);\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n    border-color: ${props => props.theme.colors.primary};\n    z-index: 1; /* Поднимаем элемент над соседними при наведении */\n  }\n`;\n\n// Увеличиваем иконку метрики\nconst MetricIcon = styled.div<{ $color?: string }>`\n  width: 56px; /* Больше размер иконки */\n  height: 56px;\n  border-radius: 12px;\n  background-color: ${props => props.$color ? `${props.$color}20` : 'rgba(255, 165, 0, 0.15)'};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 1.25rem; /* Увеличиваем отступ справа */\n  flex-shrink: 0;\n  \n  svg {\n    color: ${props => props.$color || props.theme.colors.primary};\n    width: 28px; /* Больше размер SVG */\n    height: 28px;\n  }\n`;\n\n// Для лучшей адаптивности настраиваем контент метрик так, чтобы он не переполнялся\nconst MetricContent = styled.div`\n  flex: 1;\n  min-width: 0;\n  /* Добавляем больше расстояния между элементами */\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  max-width: 100%; /* Гарантируем, что контент не выйдет за пределы */\n`;\n\n// Улучшаем метки (labels) метрики\nconst MetricLabel = styled.div`\n  font-size: 0.9375rem; /* Увеличенный размер шрифта */\n  color: ${props => props.theme.colors.textSecondary};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  letter-spacing: 0.02em; /* Улучшаем читаемость */\n`;\n\n// Увеличиваем значения метрики\nconst MetricValue = styled.div`\n  font-size: 1.75rem; /* Больший размер для ценности */\n  font-weight: 600;\n  color: ${props => props.theme.colors.text};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  line-height: 1.2; /* Улучшаем высоту строки */\n`;\n\n// Добавляем компонент для комментариев метрики\nconst MetricComment = styled.div`\n  font-size: 0.875rem;\n  color: ${props => props.theme.colors.textSecondary};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\n// Улучшаем стиль тренда\nconst MetricTrend = styled.div<{ $positive: boolean }>`\n  font-size: 0.875rem;\n  color: ${props => props.$positive ? '#40c057' : '#fa5252'};\n  display: flex;\n  align-items: center;\n  font-weight: 500; /* Делаем немного жирнее */\n  \n  &::before {\n    content: '';\n    display: inline-block;\n    width: 0;\n    height: 0;\n    margin-right: 4px;\n    border-left: 4px solid transparent;\n    border-right: 4px solid transparent;\n    border-bottom: ${props => props.$positive ? '4px solid #40c057' : 'none'};\n    border-top: ${props => !props.$positive ? '4px solid #fa5252' : 'none'};\n  }\n`;\n\n// Обновляем константы цветов для метрик\nconst metricIconColors = {\n  revenue: \"#FFA500\", // Оранжевый\n  orders: \"#FFA500\", // Оранжевый\n  average: \"#FFA500\", // Оранжевый\n  clients: \"#FFA500\", // Оранжевый\n  rating: \"#FFA500\", // Оранжевый\n  time: \"#FFA500\", // Оранжевый\n  returns: \"#FFA500\", // Оранжевый\n  delivery: \"#FFA500\"  // Оранжевый\n};\n\ninterface UserInfo {\n  id: number;\n  name: string;\n  email: string;\n  restaurantId: number;\n}\n\n// Extend the AdminOrder interface to include deliveryMethod\ninterface ExtendedAdminOrder extends AdminOrder {\n  deliveryMethod?: 'delivery' | 'pickup';\n}\n\n// Стилизованные компоненты для таблицы\nconst OrdersSection = styled.div`\n  margin-top: 1.5rem;\n  background-color: ${props => props.theme.colors.card};\n  border-radius: 12px;\n  overflow: hidden;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.15);\n`;\n\nconst OrdersSectionHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem 1.25rem;\n  background-color: ${props => '#0F0F0F'};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n`;\n\nconst OrdersTitle = styled.h3`\n  margin: 0;\n  font-size: 1.125rem;\n  font-weight: 600;\n  color: ${props => props.theme.colors.text};\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  \n  svg {\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst ToggleButton = styled.button`\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  color: ${props => props.theme.colors.textSecondary};\n  display: flex;\n  align-items: center;\n  padding: 0.375rem 0.75rem;\n  border-radius: 6px;\n  font-size: 0.875rem;\n  transition: all 0.2s;\n  \n  &:hover {\n    background-color: rgba(255, 165, 0, 0.1);\n    color: ${props => props.theme.colors.primary};\n  }\n  \n  svg {\n    width: 18px;\n    height: 18px;\n    margin-right: 0.375rem;\n    color: ${props => props.theme.colors.primary};\n  }\n`;\n\nconst TabsContainer = styled.div`\n  display: flex;\n  gap: 0.25rem;\n  padding: 0.75rem 1.25rem 0;\n  background-color: ${props => props.theme.colors.card};\n  overflow-x: auto;\n  \n  &::-webkit-scrollbar {\n    height: 4px;\n  }\n  \n  &::-webkit-scrollbar-thumb {\n    background: rgba(255, 165, 0, 0.3);\n    border-radius: 4px;\n  }\n`;\n\nconst TabButton = styled.button<{ $isActive?: boolean }>`\n  padding: 0.5rem 1rem;\n  background-color: ${props => props.$isActive \n    ? props.theme.colors.primary\n    : 'transparent'};\n  color: ${props => props.$isActive \n    ? '#000000' \n    : props.theme.colors.textSecondary};\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-weight: ${props => props.$isActive ? '600' : '400'};\n  transition: all 0.2s;\n  white-space: nowrap;\n  \n  &:hover {\n    background-color: ${props => props.$isActive \n      ? props.theme.colors.primary\n      : 'rgba(255, 165, 0, 0.1)'};\n  }\n`;\n\nconst OrdersTableContainer = styled.div<{ $isCollapsed?: boolean }>`\n  display: ${props => props.$isCollapsed ? 'none' : 'block'};\n  overflow-x: auto;\n  \n  &::-webkit-scrollbar {\n    height: 6px;\n  }\n  \n  &::-webkit-scrollbar-thumb {\n    background: rgba(255, 165, 0, 0.3);\n    border-radius: 3px;\n  }\n`;\n\nconst OrdersTable = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  min-width: 800px;\n`;\n\nconst OrdersTableHeader = styled.thead`\n  background-color: #0F0F0F;\n`;\n\nconst OrdersTableHeaderRow = styled.tr``;\n\nconst OrdersTableHeaderCell = styled.th`\n  padding: 0.875rem 1rem;\n  text-align: left;\n  font-weight: 600;\n  font-size: 0.875rem;\n  color: ${props => props.theme.colors.text};\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n`;\n\nconst OrdersTableBody = styled.tbody``;\n\nconst OrdersTableRow = styled.tr`\n  border-bottom: 1px solid ${props => props.theme.colors.border};\n  transition: background-color 0.2s;\n  \n  &:hover {\n    background-color: ${props => props.theme.colors.card};\n  }\n  \n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst OrdersTableCell = styled.td<{ $centered?: boolean }>`\n  padding: 0.875rem 1rem;\n  text-align: ${props => props.$centered ? 'center' : 'left'};\n  color: ${props => props.theme.colors.text};\n  font-size: 0.875rem;\n`;\n\nconst StatusBadge = styled.span<{ $status: string }>`\n  display: inline-block;\n  padding: 0.25rem 0.5rem;\n  border-radius: 20px;\n  font-size: 0.75rem;\n  font-weight: 600;\n  text-align: center;\n  letter-spacing: 0.02em;\n  background-color: ${props => {\n    switch (props.$status) {\n      case 'new':\n      case 'pending':\n        return 'rgba(255, 193, 7, 0.2)'; // Желтый с прозрачностью\n      case 'confirmed':\n        return 'rgba(33, 150, 243, 0.2)'; // Синий с прозрачностью\n      case 'preparing':\n        return 'rgba(156, 39, 176, 0.2)'; // Фиолетовый с прозрачностью\n      case 'ready':\n        return 'rgba(76, 175, 80, 0.2)'; // Зеленый с прозрачностью\n      case 'delivered':\n      case 'completed':\n        return 'rgba(139, 195, 74, 0.2)'; // Светло-зеленый с прозрачностью\n      case 'rejected':\n      case 'cancelled':\n        return 'rgba(244, 67, 54, 0.2)'; // Красный с прозрачностью\n      default:\n        return 'rgba(96, 125, 139, 0.2)'; // Серый с прозрачностью\n    }\n  }};\n  color: ${props => {\n    switch (props.$status) {\n      case 'new':\n      case 'pending':\n        return '#fcc419'; // Яркий желтый\n      case 'confirmed':\n        return '#339af0'; // Яркий синий\n      case 'preparing':\n        return '#ae3ec9'; // Яркий фиолетовый\n      case 'ready':\n        return '#51cf66'; // Яркий зеленый\n      case 'delivered':\n      case 'completed':\n        return '#94d82d'; // Яркий светло-зеленый\n      case 'rejected':\n      case 'cancelled':\n        return '#ff6b6b'; // Яркий красный\n      default:\n        return '#868e96'; // Серый\n    }\n  }};\n  border: 1px solid ${props => {\n    switch (props.$status) {\n      case 'new':\n      case 'pending':\n        return 'rgba(255, 193, 7, 0.3)';\n      case 'confirmed':\n        return 'rgba(33, 150, 243, 0.3)';\n      case 'preparing':\n        return 'rgba(156, 39, 176, 0.3)';\n      case 'ready':\n        return 'rgba(76, 175, 80, 0.3)';\n      case 'delivered':\n      case 'completed':\n        return 'rgba(139, 195, 74, 0.3)';\n      case 'rejected':\n      case 'cancelled':\n        return 'rgba(244, 67, 54, 0.3)';\n      default:\n        return 'rgba(96, 125, 139, 0.3)';\n    }\n  }};\n`;\n\nconst DetailsButton = styled.button`\n  padding: 0.375rem 0.75rem;\n  background-color: ${props => props.theme.colors.primary};\n  color: black;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 0.75rem;\n  font-weight: 600;\n  transition: all 0.2s;\n  letter-spacing: 0.02em;\n  text-transform: uppercase;\n  \n  &:hover {\n    background-color: #FFB52E;\n    transform: translateY(-1px);\n    box-shadow: 0 2px 5px rgba(255, 165, 0, 0.3);\n  }\n  \n  &:active {\n    transform: translateY(0);\n    box-shadow: none;\n  }\n`;\n\nconst EmptyStateContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 3rem 1rem;\n  color: ${props => props.theme.colors.textSecondary};\n  \n  svg {\n    width: 48px;\n    height: 48px;\n    margin-bottom: 1rem;\n    opacity: 0.5;\n  }\n  \n  p {\n    font-size: 0.9375rem;\n    text-align: center;\n    margin: 0;\n  }\n`;\n\n// Функция для обработки числовых значений, которые могут быть строками\nconst parseNumberValue = (value: any): number => {\n  if (value === null || value === undefined) return 0;\n  if (typeof value === 'number') return value;\n  if (typeof value === 'string') {\n    // Удаляем пробелы, заменяем запятую на точку и парсим\n    const cleanValue = value.replace(/\\s/g, '').replace(',', '.');\n    const parsedValue = parseFloat(cleanValue);\n    return isNaN(parsedValue) ? 0 : parsedValue;\n  }\n  return 0;\n};\n\nconst OwnerStatisticsPage: React.FC = () => {\n  const navigate = useNavigate();\n  const { isDarkMode } = useAppContext();\n  const [restaurantData, setRestaurantData] = useState<RestaurantAdminData | null>(null);\n  const [orders, setOrders] = useState<ExtendedAdminOrder[]>([]);\n  const [completedOrders, setCompletedOrders] = useState<ExtendedAdminOrder[]>([]);\n  const [pendingOrders, setPendingOrders] = useState<ExtendedAdminOrder[]>([]);\n  const [orderCount, setOrderCount] = useState<number>(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [userInfo, setUserInfo] = useState<UserInfo | null>(null);\n  const [activeTab, setActiveTab] = useState<string>('all');\n  const [isOrdersCollapsed, setIsOrdersCollapsed] = useState(false);\n  \n  // Новое состояние для хранения статистики\n  const [statistics, setStatistics] = useState({\n    totalRevenue: 0,\n    totalOrders: 0,\n    uniqueCustomers: 0,\n    rating: 0,\n    deliveryPercent: 0,\n    averageOrderValue: 0\n  });\n  \n  // Тема для компонентов\n  const theme = {\n    isDarkMode: true, // Всегда используем темную тему\n    colors: {\n      primary: '#FFA500', // Яркий оранжевый\n      secondary: '#4263eb',\n      success: '#40c057',\n      danger: '#e03131',\n      warning: '#f59f00',\n      background: '#000000', // Черный фон\n      card: '#121212', // Очень темно-серый для карточек\n      header: '#0A0A0A', // Почти черный для шапки\n      text: '#FFFFFF', // Белый для основного текста\n      textSecondary: '#B0B0B0', // Светло-серый для второстепенного текста\n      border: '#1A1A1A', // Темно-серый для границ\n    }\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      \n      const storedUser = localStorage.getItem('adminUser') || localStorage.getItem('currentUser');\n      const isAuthenticated = localStorage.getItem('isAuthenticated');\n      const userRole = localStorage.getItem('userRole');\n      \n      console.log('Auth state:', { storedUser: !!storedUser, isAuthenticated, userRole });\n      \n      if (storedUser && isAuthenticated === 'true' && userRole === 'admin') {\n        try {\n          const parsedUser = JSON.parse(storedUser) as UserInfo;\n          setUserInfo(parsedUser);\n          \n          // Получаем данные ресторана\n          const restaurant = await getRestaurantData(parsedUser.restaurantId);\n          console.log('Restaurant data:', restaurant);\n          \n          if (restaurant) {\n            setRestaurantData(restaurant);\n            setOrderCount(restaurant.totalOrders || restaurant.total_orders || 0);\n          } else {\n            console.warn('Restaurant data not found for ID:', parsedUser.restaurantId);\n          }\n          \n          // Получаем заказы ресторана\n          const ordersData = await getRestaurantOrders(parsedUser.restaurantId);\n          console.log('Restaurant orders:', ordersData);\n          \n          if (ordersData && ordersData.length > 0) {\n            // Добавляем deliveryMethod как случайное значение для демонстрации\n            const extendedOrders = ordersData.map(order => ({\n              ...order,\n              deliveryMethod: Math.random() > 0.5 ? 'delivery' as const : 'pickup' as const\n            }));\n            \n            setOrders(extendedOrders);\n            \n            // Фильтруем заказы по статусу\n            const completed = extendedOrders.filter(order => \n              order.status === 'delivered' || order.status === 'ready' || order.status === 'completed'\n            );\n            \n            const pending = extendedOrders.filter(order => \n              order.status === 'new' || order.status === 'confirmed' || \n              order.status === 'preparing' || order.status === 'pending'\n            );\n            \n            setCompletedOrders(completed);\n            setPendingOrders(pending);\n          } else {\n            setOrders([]);\n            setCompletedOrders([]);\n            setPendingOrders([]);\n          }\n          \n          // Получаем полную статистику из специального метода\n          const statsData = await getRestaurantStatistics(parsedUser.restaurantId);\n          console.log('Fetched restaurant statistics:', statsData);\n          \n          // Добавим отладочную информацию о типах и значениях\n          if (statsData && statsData.statistics) {\n            console.log('Raw statistics data:');\n            console.log('totalRevenue:', statsData.statistics.totalRevenue, 'type:', typeof statsData.statistics.totalRevenue);\n            console.log('totalSales:', statsData.statistics.totalSales, 'type:', typeof statsData.statistics.totalSales);\n            console.log('deliveryPercent:', statsData.statistics.deliveryPercent, 'type:', typeof statsData.statistics.deliveryPercent);\n            \n            setStatistics({\n              totalRevenue: parseNumberValue(statsData.statistics.totalRevenue || statsData.statistics.totalSales || 0),\n              totalOrders: parseNumberValue(statsData.statistics.totalOrders || statsData.statistics.orderCount || 0),\n              uniqueCustomers: parseNumberValue(statsData.statistics.uniqueCustomers || 0),\n              rating: parseNumberValue(statsData.statistics.rating || 0),\n              deliveryPercent: parseNumberValue(statsData.statistics.deliveryPercent || 0),\n              averageOrderValue: parseNumberValue(statsData.statistics.averageOrderValue || 0)\n            });\n            \n            console.log('Parsed statistics:', statistics);\n          }\n          \n        } catch (error) {\n          console.error(\"Error parsing user data:\", error);\n          navigate('/admin/login');\n        }\n      } else {\n        // Если пользователь не авторизован, перенаправляем на страницу входа\n        console.log('User is not authenticated, redirecting to login');\n        navigate('/admin/login');\n      }\n      \n      setIsLoading(false);\n    };\n    \n    fetchData();\n  }, [navigate]);\n\n  const handleLogout = () => {\n    // Удаляем все ключи, связанные с аутентификацией\n    localStorage.removeItem('isAuthenticated');\n    localStorage.removeItem('currentUser');\n    localStorage.removeItem('userRole');\n    localStorage.removeItem('adminUser');\n    \n    // Перенаправляем на страницу выбора роли\n    navigate('/role-selection');\n  };\n\n  const handleMenuManagement = () => {\n    navigate('/owner/menu');\n  };\n\n  const handleProfileManagement = () => {\n    navigate('/owner/profile');\n  };\n\n  // Функция для форматирования даты\n  const formatDate = (dateString: string): string => {\n    const date = new Date(dateString);\n    return new Intl.DateTimeFormat('ru-RU', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    }).format(date);\n  };\n\n  // Функция для форматирования суммы\n  const formatCurrency = (amount: number): string => {\n    return amount.toLocaleString('ru-RU') + ' ₽';\n  };\n\n  // Функция обновления данных\n  const handleRefresh = async () => {\n    if (!userInfo) return;\n    \n    console.log('Refreshing data...');\n    setIsLoading(true);\n    \n    try {\n      // Получаем актуальные данные ресторана\n      const restaurant = await getRestaurantData(userInfo.restaurantId);\n      if (restaurant) {\n        setRestaurantData(restaurant);\n        setOrderCount(restaurant.totalOrders || restaurant.total_orders || 0);\n      }\n      \n      // Получаем актуальные заказы\n      const ordersData = await getRestaurantOrders(userInfo.restaurantId);\n      \n      if (ordersData && ordersData.length > 0) {\n        // Преобразуем данные и сохраняем в состояние\n        const extendedOrders = ordersData.map(order => ({\n          ...order,\n          deliveryMethod: Math.random() > 0.5 ? 'delivery' as const : 'pickup' as const\n        }));\n        \n        setOrders(extendedOrders);\n        \n        // Фильтруем заказы по статусу\n        const completed = extendedOrders.filter(order => \n          order.status === 'delivered' || order.status === 'ready' || order.status === 'completed'\n        );\n        \n        const pending = extendedOrders.filter(order => \n          order.status === 'new' || order.status === 'confirmed' || \n          order.status === 'preparing' || order.status === 'pending'\n        );\n        \n        setCompletedOrders(completed);\n        setPendingOrders(pending);\n      }\n      \n      // Обновляем полную статистику\n      const statsData = await getRestaurantStatistics(userInfo.restaurantId);\n      \n      if (statsData && statsData.statistics) {\n        setStatistics({\n          totalRevenue: parseNumberValue(statsData.statistics.totalRevenue || statsData.statistics.totalSales || 0),\n          totalOrders: parseNumberValue(statsData.statistics.totalOrders || statsData.statistics.orderCount || 0),\n          uniqueCustomers: parseNumberValue(statsData.statistics.uniqueCustomers || 0),\n          rating: parseNumberValue(statsData.statistics.rating || 0),\n          deliveryPercent: parseNumberValue(statsData.statistics.deliveryPercent || 0),\n          averageOrderValue: parseNumberValue(statsData.statistics.averageOrderValue || 0)\n        });\n      }\n      \n      console.log('Data refresh completed');\n    } catch (error) {\n      console.error('Error refreshing data:', error);\n      alert('Произошла ошибка при обновлении данных. Пожалуйста, попробуйте позже.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Интеграция с Telegram WebApp\n  useEffect(() => {\n    // Безопасная проверка наличия Telegram WebApp API\n    const telegram = window.Telegram;\n    const telegramWebApp = telegram && telegram.WebApp;\n    \n    if (telegramWebApp) {\n      try {\n        // Базовые функции, которые должны поддерживаться всеми версиями WebApp\n        telegramWebApp.expand();\n        telegramWebApp.BackButton.show();\n        telegramWebApp.BackButton.onClick(() => navigate('/owner/menu'));\n        \n        // Дополнительные функции, проверяем их наличие перед вызовом\n        // @ts-ignore - игнорируем проблемы типизации для методов WebApp API\n        if (typeof telegramWebApp.enableClosingConfirmation === 'function') {\n          // @ts-ignore\n          telegramWebApp.enableClosingConfirmation();\n        }\n        \n        // @ts-ignore\n        if (typeof telegramWebApp.setHeaderColor === 'function') {\n          // @ts-ignore\n          telegramWebApp.setHeaderColor('#FF9F0D');\n        }\n        \n        // @ts-ignore\n        if (typeof telegramWebApp.setBackgroundColor === 'function') {\n          // @ts-ignore\n          telegramWebApp.setBackgroundColor('#181818');\n        }\n        \n        return () => {\n          // Очистка при размонтировании\n          telegramWebApp.BackButton.onClick(() => {}); // Сбрасываем обработчик\n          \n          // @ts-ignore\n          if (typeof telegramWebApp.disableClosingConfirmation === 'function') {\n            // @ts-ignore\n            telegramWebApp.disableClosingConfirmation();\n          }\n        };\n      } catch (error) {\n        console.error('Error setting up Telegram WebApp:', error);\n      }\n    }\n  }, [navigate]);\n\n  // Update the useEffect to respond to activeTab changes\n  useEffect(() => {\n    // Функция для прокрутки к активному табу\n    const scrollToActiveTab = () => {\n      const activeTabs = document.querySelectorAll('[data-active=\"true\"]');\n      if (activeTabs.length > 0) {\n        const activeTab = activeTabs[0] as HTMLElement;\n        if (activeTab && activeTab.parentElement) {\n          // Скроллим контейнер до активного таба с учетом отступов\n          activeTab.parentElement.scrollLeft = activeTab.offsetLeft - 16;\n        }\n      }\n    };\n    \n    // Вызываем функцию после монтирования компонента и при изменении активного таба\n    scrollToActiveTab();\n  }, [activeTab]); // Добавляем activeTab в массив зависимостей\n\n  // Функция для расчета данных заказов\n  const calculateOrderStats = () => {\n    // Рассчитываем статистику по заказам, если есть данные\n    if (orders && orders.length > 0) {\n      console.log('Calculating stats from', orders.length, 'orders');\n      const totalOrders = orders.length;\n      const totalRevenue = orders.reduce((sum, order) => sum + order.amount, 0);\n      const averageOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0;\n      \n      console.log('Calculated stats:', { totalOrders, totalRevenue, averageOrderValue });\n      return {\n        totalOrders,\n        totalRevenue,\n        averageOrderValue\n      };\n    }\n    \n    // Если заказов нет, но есть данные из restaurantData\n    if (restaurantData) {\n      console.log('Using restaurant data for stats:', {\n        totalOrders: restaurantData.totalOrders || 0,\n        totalRevenue: restaurantData.totalRevenue || 0,\n        averageOrderValue: restaurantData.averageOrderValue || 0\n      });\n      return {\n        totalOrders: restaurantData.totalOrders || 0,\n        totalRevenue: restaurantData.totalRevenue || 0,\n        averageOrderValue: restaurantData.averageOrderValue || 0\n      };\n    }\n    \n    // Если нет никаких данных, возвращаем нули\n    console.log('No data available for stats, returning zeros');\n    return {\n      totalOrders: 0,\n      totalRevenue: 0,\n      averageOrderValue: 0\n    };\n  };\n  \n  // Получаем данные статистики\n  const { totalOrders, totalRevenue, averageOrderValue } = calculateOrderStats();\n\n  // Add logging for debugging before render\n  useEffect(() => {\n    console.log('All orders:', orders);\n    console.log('Active tab:', activeTab);\n    console.log('Filtered orders:', activeTab === 'all' ? orders :\n      activeTab === 'pending' ? pendingOrders :\n      activeTab === 'completed' ? completedOrders :\n      activeTab === 'cancelled' ? orders.filter(o => o.status === 'cancelled') :\n      activeTab === 'delivery' ? orders.filter(o => o.deliveryMethod === 'delivery') :\n      orders.filter(o => o.deliveryMethod === 'pickup'));\n  }, [orders, pendingOrders, completedOrders, activeTab]);\n\n  // Вспомогательные функции для аналитики\n  const getUniqueClientsCount = (orders: ExtendedAdminOrder[]): number => {\n    if (!orders || orders.length === 0) return 0;\n    const uniqueClients = new Set(orders.map(o => o.customer));\n    return uniqueClients.size;\n  };\n\n  const getCancelledOrdersPercent = (orders: ExtendedAdminOrder[]): number => {\n    if (!orders || orders.length === 0) return 0;\n    const cancelledCount = orders.filter(o => \n      o.status === 'cancelled' || o.status === 'rejected'\n    ).length;\n    return Math.round(cancelledCount / orders.length * 100);\n  };\n\n  const getDeliveryPercent = (orders: ExtendedAdminOrder[]): number => {\n    if (!orders || orders.length === 0) return 0;\n    const deliveryCount = orders.filter(o => o.deliveryMethod === 'delivery').length;\n    return Math.round(deliveryCount / orders.length * 100);\n  };\n\n  // Вспомогательная функция для получения текстового описания статуса заказа\n  const getStatusText = (status: string): string => {\n    switch (status) {\n      case 'new':\n        return 'Новый';\n      case 'confirmed':\n        return 'Подтвержден';\n      case 'preparing':\n        return 'Готовится';\n      case 'ready':\n        return 'Готов к выдаче';\n      case 'delivered':\n        return 'Доставлен';\n      case 'completed':\n        return 'Выполнен';\n      case 'rejected':\n        return 'Отменен';\n      case 'cancelled':\n        return 'Отменен';\n      default:\n        return 'Неизвестный статус';\n    }\n  };\n\n  // Добавляем функцию для обработки просмотра деталей заказа\n  const handleViewDetails = (order: ExtendedAdminOrder) => {\n    // Открываем детальную информацию о заказе в модальном окне\n    const orderItems = order.orderItems || [];\n    const hasItems = orderItems.length > 0;\n    \n    // Строим сообщение с деталями заказа\n    let detailsMessage = `\n      Детали заказа #${order.id}\n      \n      Клиент: ${order.customer}\n      Дата: ${formatDate(order.date)}\n      Сумма: ${formatCurrency(order.amount)}\n      Статус: ${getStatusText(order.status)}\n      Метод доставки: ${order.deliveryMethod === 'delivery' ? 'Доставка' : 'Самовывоз'}\n    `;\n    \n    if (hasItems) {\n      detailsMessage += `\\nСостав заказа:\\n`;\n      orderItems.forEach(item => {\n        detailsMessage += `- ${item.name} - ${item.quantity} x ${formatCurrency(item.price)} = ${formatCurrency(item.quantity * item.price)}\\n`;\n      });\n    } else {\n      detailsMessage += `\\nИнформация о составе заказа недоступна`;\n    }\n    \n    // Показываем модальное окно с информацией\n    alert(detailsMessage);\n    \n    // Для продуктовой версии здесь должно открываться нормальное модальное окно\n    // с красивой разметкой деталей заказа\n  };\n\n  // Toggle orders section visibility\n  const toggleOrdersSection = () => {\n    setIsOrdersCollapsed(!isOrdersCollapsed);\n  };\n\n  if (isLoading) {\n    return (\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <Container>\n          <div style={{ \n            display: 'flex', \n            justifyContent: 'center', \n            alignItems: 'center', \n            height: '100vh',\n            color: '#e0e0e0'\n          }}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" style={{ marginRight: '0.75rem', animation: 'spin 1s linear infinite' }}>\n              <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n              <path d=\"M12 6v6l4 2\"></path>\n            </svg>\n            Загрузка...\n          </div>\n        </Container>\n      </ThemeProvider>\n    );\n  }\n  \n  if (!restaurantData) {\n    return (\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <Container>\n          <DashboardHeader>\n            <HeaderContent>\n              <h1>Ошибка загрузки данных</h1>\n            </HeaderContent>\n            <ButtonsContainer>\n              <ActionButton onClick={handleRefresh}>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                  <path d=\"M3 2v6h6\"></path>\n                  <path d=\"M21 12A9 9 0 0 0 6 5.3L3 8\"></path>\n                  <path d=\"M21 22v-6h-6\"></path>\n                  <path d=\"M3 12a9 9 0 0 0 15 6.7l3-2.7\"></path>\n                </svg>\n                Обновить данные\n              </ActionButton>\n              <ActionButton $variant=\"danger\" onClick={handleLogout}>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                  <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\"></path>\n                  <polyline points=\"16 17 21 12 16 7\"></polyline>\n                  <line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\"></line>\n                </svg>\n                Выйти\n              </ActionButton>\n            </ButtonsContainer>\n          </DashboardHeader>\n          <MainContent>\n            <EmptyStateContainer>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>\n                <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line>\n                <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\n              </svg>\n              <h2>Не удалось загрузить данные ресторана</h2>\n              <p>Пожалуйста, попробуйте обновить страницу или авторизоваться заново.</p>\n            </EmptyStateContainer>\n          </MainContent>\n        </Container>\n      </ThemeProvider>\n    );\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <Container>\n        <DashboardHeader>\n          <HeaderContent>\n            <h1>Администрирование ресторана</h1>\n            <p>{restaurantData?.name || 'Загрузка...'}</p>\n          </HeaderContent>\n          \n          <ButtonsContainer>\n            <ActionButton onClick={handleMenuManagement}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                <line x1=\"3\" y1=\"12\" x2=\"21\" y2=\"12\"></line>\n                <line x1=\"3\" y1=\"6\" x2=\"21\" y2=\"6\"></line>\n                <line x1=\"3\" y1=\"18\" x2=\"21\" y2=\"18\"></line>\n              </svg>\n              Управление меню\n            </ActionButton>\n            <ActionButton onClick={handleProfileManagement}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path>\n                <circle cx=\"12\" cy=\"7\" r=\"4\"></circle>\n              </svg>\n              Профиль ресторана\n            </ActionButton>\n            <ActionButton onClick={handleRefresh}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                <path d=\"M3 2v6h6\"></path>\n                <path d=\"M21 12A9 9 0 0 0 6 5.3L3 8\"></path>\n                <path d=\"M21 22v-6h-6\"></path>\n                <path d=\"M3 12a9 9 0 0 0 15 6.7l3-2.7\"></path>\n              </svg>\n              Обновить\n            </ActionButton>\n            <ActionButton $variant=\"danger\" onClick={handleLogout}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\"></path>\n                <polyline points=\"16 17 21 12 16 7\"></polyline>\n                <line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\"></line>\n              </svg>\n              Выйти\n            </ActionButton>\n          </ButtonsContainer>\n        </DashboardHeader>\n\n        <MainContent>\n          {/* Информация о ресторане */}\n          {restaurantData && (\n            <RestaurantInfoCard>\n              <RestaurantInfo>\n                <RestaurantName>{restaurantData.name}</RestaurantName>\n                <RestaurantAddress>\n                  {restaurantData.address}\n                  {restaurantData.city ? `, ${String(restaurantData.city)}` : ''}\n                </RestaurantAddress>\n                <RestaurantDescription>{restaurantData.description}</RestaurantDescription>\n              </RestaurantInfo>\n            </RestaurantInfoCard>\n          )}\n\n          {/* Все метрики в одном ряду */}\n          <MetricsRow>\n            <MetricCardWrapper>\n              <MetricCard>\n                <MetricIcon $color={metricIconColors.revenue}>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"23\"></line>\n                    <path d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\"></path>\n                  </svg>\n                </MetricIcon>\n                <MetricContent>\n                  <MetricLabel>Общая выручка</MetricLabel>\n                  <MetricValue>{formatCurrency(parseNumberValue(statistics.totalRevenue) || 0)}</MetricValue>\n                  <MetricComment>За всё время работы</MetricComment>\n                </MetricContent>\n              </MetricCard>\n            </MetricCardWrapper>\n            \n            <MetricCardWrapper>\n              <MetricCard>\n                <MetricIcon $color={metricIconColors.orders}>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path>\n                    <rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect>\n                    <path d=\"M9 14h6\"></path>\n                    <path d=\"M9 18h6\"></path>\n                    <path d=\"M9 10h6\"></path>\n                  </svg>\n                </MetricIcon>\n                <MetricContent>\n                  <MetricLabel>Всего заказов</MetricLabel>\n                  <MetricValue>{parseNumberValue(statistics.totalOrders) || 0}</MetricValue>\n                  <MetricComment>Завершенных заказов</MetricComment>\n                </MetricContent>\n              </MetricCard>\n            </MetricCardWrapper>\n            \n            <MetricCardWrapper>\n              <MetricCard>\n                <MetricIcon $color={metricIconColors.clients}>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <path d=\"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path>\n                    <circle cx=\"9\" cy=\"7\" r=\"4\"></circle>\n                    <path d=\"M23 21v-2a4 4 0 0 0-3-3.87\"></path>\n                    <path d=\"M16 3.13a4 4 0 0 1 0 7.75\"></path>\n                  </svg>\n                </MetricIcon>\n                <MetricContent>\n                  <MetricLabel>Количество клиентов</MetricLabel>\n                  <MetricValue>{parseNumberValue(statistics.uniqueCustomers) || 0}</MetricValue>\n                  <MetricComment>Уникальных клиентов</MetricComment>\n                </MetricContent>\n              </MetricCard>\n            </MetricCardWrapper>\n            \n            <MetricCardWrapper>\n              <MetricCard>\n                <MetricIcon $color={metricIconColors.rating}>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <polygon points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\"></polygon>\n                  </svg>\n                </MetricIcon>\n                <MetricContent>\n                  <MetricLabel>Рейтинг ресторана</MetricLabel>\n                  <MetricValue>\n                    {typeof statistics.rating === 'number' \n                      ? statistics.rating.toFixed(1) \n                      : typeof statistics.rating === 'string' \n                        ? parseFloat(statistics.rating).toFixed(1)\n                        : (parseNumberValue(statistics.rating) || 0).toFixed(1)\n                    }\n                  </MetricValue>\n                  <MetricComment>На основе оценок клиентов</MetricComment>\n                </MetricContent>\n              </MetricCard>\n            </MetricCardWrapper>\n            \n            <MetricCardWrapper>\n              <MetricCard>\n                <MetricIcon $color={metricIconColors.delivery}>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <rect x=\"1\" y=\"3\" width=\"15\" height=\"13\"></rect>\n                    <polygon points=\"16 8 20 8 23 11 23 16 16 16 16 8\"></polygon>\n                    <circle cx=\"5.5\" cy=\"18.5\" r=\"2.5\"></circle>\n                    <circle cx=\"18.5\" cy=\"18.5\" r=\"2.5\"></circle>\n                  </svg>\n                </MetricIcon>\n                <MetricContent>\n                  <MetricLabel>% Доставки</MetricLabel>\n                  <MetricValue>{parseNumberValue(statistics.deliveryPercent) || 0}%</MetricValue>\n                  <MetricComment>Заказов с доставкой</MetricComment>\n                </MetricContent>\n              </MetricCard>\n            </MetricCardWrapper>\n          </MetricsRow>\n\n          {/* Таблица заказов */}\n          <OrdersSection>\n            <OrdersSectionHeader>\n              <OrdersTitle>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                  <path d=\"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z\"></path>\n                  <line x1=\"3\" y1=\"6\" x2=\"21\" y2=\"6\"></line>\n                  <path d=\"M16 10a4 4 0 0 1-8 0\"></path>\n                </svg>\n                Заказы ({orders.length})\n              </OrdersTitle>\n              <ToggleButton onClick={toggleOrdersSection}>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                  {isOrdersCollapsed \n                    ? <polyline points=\"6 9 12 15 18 9\"></polyline>\n                    : <polyline points=\"18 15 12 9 6 15\"></polyline>\n                  }\n                </svg>\n                {isOrdersCollapsed ? 'Развернуть' : 'Свернуть'}\n              </ToggleButton>\n            </OrdersSectionHeader>\n            \n            <OrdersTableContainer $isCollapsed={isOrdersCollapsed}>\n              <TabsContainer>\n                <TabButton \n                  $isActive={activeTab === 'all'} \n                  onClick={() => setActiveTab('all')}\n                >\n                  Все заказы ({orders.length})\n                </TabButton>\n                <TabButton \n                  $isActive={activeTab === 'active'} \n                  onClick={() => setActiveTab('active')}\n                >\n                  Активные ({pendingOrders.length})\n                </TabButton>\n                <TabButton \n                  $isActive={activeTab === 'completed'} \n                  onClick={() => setActiveTab('completed')}\n                >\n                  Завершенные ({completedOrders.length})\n                </TabButton>\n              </TabsContainer>\n              \n              <OrdersTable>\n                <OrdersTableHeader>\n                  <OrdersTableHeaderRow>\n                    <OrdersTableHeaderCell>№ Заказа</OrdersTableHeaderCell>\n                    <OrdersTableHeaderCell>Клиент</OrdersTableHeaderCell>\n                    <OrdersTableHeaderCell>Дата</OrdersTableHeaderCell>\n                    <OrdersTableHeaderCell>Сумма</OrdersTableHeaderCell>\n                    <OrdersTableHeaderCell>Статус</OrdersTableHeaderCell>\n                    <OrdersTableHeaderCell>Детали</OrdersTableHeaderCell>\n                  </OrdersTableHeaderRow>\n                </OrdersTableHeader>\n                <OrdersTableBody>\n                  {(activeTab === 'all' ? orders : \n                    activeTab === 'active' ? pendingOrders : \n                    completedOrders).map((order) => (\n                    <OrdersTableRow key={order.id}>\n                      <OrdersTableCell>{order.id}</OrdersTableCell>\n                      <OrdersTableCell>{order.customer}</OrdersTableCell>\n                      <OrdersTableCell>{formatDate(order.date)}</OrdersTableCell>\n                      <OrdersTableCell>{formatCurrency(order.amount)}</OrdersTableCell>\n                      <OrdersTableCell>\n                        <StatusBadge $status={order.status}>\n                          {getStatusText(order.status)}\n                        </StatusBadge>\n                      </OrdersTableCell>\n                      <OrdersTableCell>\n                        <DetailsButton onClick={() => handleViewDetails(order)}>\n                          Просмотр\n                        </DetailsButton>\n                      </OrdersTableCell>\n                    </OrdersTableRow>\n                  ))}\n                  {(activeTab === 'all' ? orders.length === 0 : \n                    activeTab === 'active' ? pendingOrders.length === 0 : \n                    completedOrders.length === 0) && (\n                    <OrdersTableRow>\n                      <OrdersTableCell colSpan={6} $centered={true}>\n                        <EmptyStateContainer>\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n                            <path d=\"M8 12h8\"></path>\n                          </svg>\n                          <p>Нет данных для отображения</p>\n                        </EmptyStateContainer>\n                      </OrdersTableCell>\n                    </OrdersTableRow>\n                  )}\n                </OrdersTableBody>\n              </OrdersTable>\n            </OrdersTableContainer>\n          </OrdersSection>\n        </MainContent>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default OwnerStatisticsPage; "],"names":["GlobalStyle","createGlobalStyle","Container","styled","div","props","theme","colors","background","text","DashboardHeader","header","border","HeaderContent","textSecondary","ButtonsContainer","ActionButton","button","$variant","primary","warning","danger","MainContent","RestaurantInfoCard","card","RestaurantInfo","RestaurantName","h2","RestaurantAddress","p","RestaurantDescription","MetricsRow","MetricCardWrapper","MetricCard","MetricIcon","$color","MetricContent","MetricLabel","MetricValue","MetricComment","metricIconColors","$positive","OrdersSection","OrdersSectionHeader","OrdersTitle","h3","ToggleButton","TabsContainer","TabButton","$isActive","OrdersTableContainer","$isCollapsed","OrdersTable","table","OrdersTableHeader","thead","OrdersTableHeaderRow","tr","OrdersTableHeaderCell","th","OrdersTableBody","tbody","OrdersTableRow","OrdersTableCell","td","$centered","StatusBadge","span","$status","DetailsButton","EmptyStateContainer","parseNumberValue","value","undefined","cleanValue","replace","parsedValue","parseFloat","isNaN","OwnerStatisticsPage","navigate","useNavigate","isDarkMode","useAppContext","restaurantData","setRestaurantData","useState","orders","setOrders","completedOrders","setCompletedOrders","pendingOrders","setPendingOrders","orderCount","setOrderCount","isLoading","setIsLoading","userInfo","setUserInfo","activeTab","setActiveTab","isOrdersCollapsed","setIsOrdersCollapsed","statistics","setStatistics","totalRevenue","totalOrders","uniqueCustomers","rating","deliveryPercent","averageOrderValue","secondary","success","useEffect","async","storedUser","localStorage","getItem","isAuthenticated","userRole","console","log","parsedUser","JSON","parse","restaurant","getRestaurantData","restaurantId","total_orders","warn","ordersData","getRestaurantOrders","length","extendedOrders","map","order","deliveryMethod","Math","random","completed","filter","status","pending","statsData","getRestaurantStatistics","totalSales","error","fetchData","handleLogout","removeItem","formatDate","dateString","date","Date","Intl","DateTimeFormat","day","month","year","hour","minute","format","formatCurrency","amount","toLocaleString","handleRefresh","alert","telegram","window","Telegram","telegramWebApp","WebApp","expand","BackButton","show","onClick","enableClosingConfirmation","setHeaderColor","setBackgroundColor","disableClosingConfirmation","scrollToActiveTab","activeTabs","document","querySelectorAll","parentElement","scrollLeft","offsetLeft","calculateOrderStats","reduce","sum","o","getStatusText","_jsxs","ThemeProvider","children","_jsx","style","display","justifyContent","alignItems","height","color","xmlns","width","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","marginRight","animation","cx","cy","r","d","name","handleMenuManagement","x1","y1","x2","y2","handleProfileManagement","points","address","city","String","description","x","y","rx","ry","toFixed","toggleOrdersSection","id","customer","orderItems","hasItems","detailsMessage","forEach","item","quantity","price","handleViewDetails","colSpan"],"sourceRoot":""}