{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AsusLaptop\\\\Desktop\\\\Kulcha\\\\frontend\\\\kulcha-app\\\\src\\\\pages\\\\CitySelectionPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, MainContent, ProfileHeading, FormGroup, Label, Select } from '../styles/Components';\nimport Header from '../components/Header';\nimport Navigation from '../components/Navigation';\nimport { useAppContext } from '../contexts/AppContext';\nimport useTelegram from '../hooks/useTelegram';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CitySelectionPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    cities,\n    selectedCity,\n    selectCity\n  } = useAppContext();\n  const {\n    showBackButton,\n    hideBackButton,\n    setBackButtonCallback,\n    showMainButton,\n    setMainButtonCallback\n  } = useTelegram();\n  useEffect(() => {\n    if (cities.length === 0) {\n      // If no cities available, redirect back to home\n      navigate('/');\n    }\n  }, [cities, navigate]);\n  useEffect(() => {\n    hideBackButton();\n    showMainButton('Continue');\n    setMainButtonCallback(() => {\n      if (selectedCity) {\n        navigate('/restaurant-selection');\n      }\n    });\n    return () => {\n      hideBackButton();\n    };\n  }, [hideBackButton, navigate, selectedCity, setBackButtonCallback, setMainButtonCallback, showMainButton]);\n  const handleCityChange = e => {\n    const cityId = parseInt(e.target.value, 10);\n    const city = cities.find(c => c.id === cityId);\n    if (city) {\n      selectCity(city);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MainContent, {\n      children: [/*#__PURE__*/_jsxDEV(ProfileHeading, {\n        children: \"Select your city\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          htmlFor: \"city\",\n          children: \"City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          id: \"city\",\n          value: (selectedCity === null || selectedCity === void 0 ? void 0 : selectedCity.id) || '',\n          onChange: handleCityChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a city\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), cities.map(city => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: city.id,\n            children: city.name\n          }, city.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(CitySelectionPage, \"avjT2gx3ZzgLuNTUrZC/ILKZFfg=\", false, function () {\n  return [useNavigate, useAppContext, useTelegram];\n});\n_c = CitySelectionPage;\nexport default CitySelectionPage;\nvar _c;\n$RefreshReg$(_c, \"CitySelectionPage\");","map":{"version":3,"names":["React","useEffect","useNavigate","Container","MainContent","ProfileHeading","FormGroup","Label","Select","Header","Navigation","useAppContext","useTelegram","jsxDEV","_jsxDEV","CitySelectionPage","_s","navigate","cities","selectedCity","selectCity","showBackButton","hideBackButton","setBackButtonCallback","showMainButton","setMainButtonCallback","length","handleCityChange","e","cityId","parseInt","target","value","city","find","c","id","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","map","name","_c","$RefreshReg$"],"sources":["C:/Users/AsusLaptop/Desktop/Kulcha/frontend/kulcha-app/src/pages/CitySelectionPage.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Container, MainContent, ProfileHeading, FormGroup, Label, Select } from '../styles/Components';\r\nimport Header from '../components/Header';\r\nimport Navigation from '../components/Navigation';\r\nimport { useAppContext } from '../contexts/AppContext';\r\nimport useTelegram from '../hooks/useTelegram';\r\n\r\nconst CitySelectionPage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const { cities, selectedCity, selectCity } = useAppContext();\r\n  const { showBackButton, hideBackButton, setBackButtonCallback, showMainButton, setMainButtonCallback } = useTelegram();\r\n\r\n  useEffect(() => {\r\n    if (cities.length === 0) {\r\n      // If no cities available, redirect back to home\r\n      navigate('/');\r\n    }\r\n  }, [cities, navigate]);\r\n\r\n  useEffect(() => {\r\n    hideBackButton();\r\n    showMainButton('Continue');\r\n    \r\n    setMainButtonCallback(() => {\r\n      if (selectedCity) {\r\n        navigate('/restaurant-selection');\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      hideBackButton();\r\n    };\r\n  }, [hideBackButton, navigate, selectedCity, setBackButtonCallback, setMainButtonCallback, showMainButton]);\r\n\r\n  const handleCityChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const cityId = parseInt(e.target.value, 10);\r\n    const city = cities.find(c => c.id === cityId);\r\n    if (city) {\r\n      selectCity(city);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Header />\r\n      <Navigation />\r\n      <MainContent>\r\n        <ProfileHeading>Select your city</ProfileHeading>\r\n        <FormGroup>\r\n          <Label htmlFor=\"city\">City</Label>\r\n          <Select \r\n            id=\"city\" \r\n            value={selectedCity?.id || ''} \r\n            onChange={handleCityChange}\r\n          >\r\n            <option value=\"\">Select a city</option>\r\n            {cities.map(city => (\r\n              <option key={city.id} value={city.id}>{city.name}</option>\r\n            ))}\r\n          </Select>\r\n        </FormGroup>\r\n      </MainContent>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CitySelectionPage; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,EAAEC,WAAW,EAAEC,cAAc,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,QAAQ,sBAAsB;AACvG,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,aAAa,QAAQ,wBAAwB;AACtD,OAAOC,WAAW,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,iBAA2B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxC,MAAMC,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEgB,MAAM;IAAEC,YAAY;IAAEC;EAAW,CAAC,GAAGT,aAAa,CAAC,CAAC;EAC5D,MAAM;IAAEU,cAAc;IAAEC,cAAc;IAAEC,qBAAqB;IAAEC,cAAc;IAAEC;EAAsB,CAAC,GAAGb,WAAW,CAAC,CAAC;EAEtHX,SAAS,CAAC,MAAM;IACd,IAAIiB,MAAM,CAACQ,MAAM,KAAK,CAAC,EAAE;MACvB;MACAT,QAAQ,CAAC,GAAG,CAAC;IACf;EACF,CAAC,EAAE,CAACC,MAAM,EAAED,QAAQ,CAAC,CAAC;EAEtBhB,SAAS,CAAC,MAAM;IACdqB,cAAc,CAAC,CAAC;IAChBE,cAAc,CAAC,UAAU,CAAC;IAE1BC,qBAAqB,CAAC,MAAM;MAC1B,IAAIN,YAAY,EAAE;QAChBF,QAAQ,CAAC,uBAAuB,CAAC;MACnC;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACXK,cAAc,CAAC,CAAC;IAClB,CAAC;EACH,CAAC,EAAE,CAACA,cAAc,EAAEL,QAAQ,EAAEE,YAAY,EAAEI,qBAAqB,EAAEE,qBAAqB,EAAED,cAAc,CAAC,CAAC;EAE1G,MAAMG,gBAAgB,GAAIC,CAAuC,IAAK;IACpE,MAAMC,MAAM,GAAGC,QAAQ,CAACF,CAAC,CAACG,MAAM,CAACC,KAAK,EAAE,EAAE,CAAC;IAC3C,MAAMC,IAAI,GAAGf,MAAM,CAACgB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKP,MAAM,CAAC;IAC9C,IAAII,IAAI,EAAE;MACRb,UAAU,CAACa,IAAI,CAAC;IAClB;EACF,CAAC;EAED,oBACEnB,OAAA,CAACX,SAAS;IAAAkC,QAAA,gBACRvB,OAAA,CAACL,MAAM;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV3B,OAAA,CAACJ,UAAU;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACd3B,OAAA,CAACV,WAAW;MAAAiC,QAAA,gBACVvB,OAAA,CAACT,cAAc;QAAAgC,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAgB,CAAC,eACjD3B,OAAA,CAACR,SAAS;QAAA+B,QAAA,gBACRvB,OAAA,CAACP,KAAK;UAACmC,OAAO,EAAC,MAAM;UAAAL,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAClC3B,OAAA,CAACN,MAAM;UACL4B,EAAE,EAAC,MAAM;UACTJ,KAAK,EAAE,CAAAb,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEiB,EAAE,KAAI,EAAG;UAC9BO,QAAQ,EAAEhB,gBAAiB;UAAAU,QAAA,gBAE3BvB,OAAA;YAAQkB,KAAK,EAAC,EAAE;YAAAK,QAAA,EAAC;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACtCvB,MAAM,CAAC0B,GAAG,CAACX,IAAI,iBACdnB,OAAA;YAAsBkB,KAAK,EAAEC,IAAI,CAACG,EAAG;YAAAC,QAAA,EAAEJ,IAAI,CAACY;UAAI,GAAnCZ,IAAI,CAACG,EAAE;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAqC,CAC1D,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEhB,CAAC;AAACzB,EAAA,CAzDID,iBAA2B;EAAA,QACdb,WAAW,EACiBS,aAAa,EAC+CC,WAAW;AAAA;AAAAkC,EAAA,GAHhH/B,iBAA2B;AA2DjC,eAAeA,iBAAiB;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}